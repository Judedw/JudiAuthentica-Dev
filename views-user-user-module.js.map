{"version":3,"sources":["webpack:///./src/app/views/user/roles/role-table-popup/role-table-popup.component.html","webpack:///./src/app/views/user/roles/role-table-popup/role-table-popup.component.ts","webpack:///./src/app/views/user/roles/role-table.component.html","webpack:///./src/app/views/user/roles/role-table.component.ts","webpack:///./src/app/views/user/user-table/user-category-popup/user-category-popup.component.html","webpack:///./src/app/views/user/user-table/user-category-popup/user-category-popup.component.ts","webpack:///./src/app/views/user/user-table/user-community-popup/user-community-popup.component.html","webpack:///./src/app/views/user/user-table/user-community-popup/user-community-popup.component.ts","webpack:///./src/app/views/user/user-table/user-create-popup/user-create-popup.component.html","webpack:///./src/app/views/user/user-table/user-create-popup/user-create-popup.component.ts","webpack:///./src/app/views/user/user-table/user-table-popup/user-table-popup.component.html","webpack:///./src/app/views/user/user-table/user-table-popup/user-table-popup.component.ts","webpack:///./src/app/views/user/user-table/user-table.component.html","webpack:///./src/app/views/user/user-table/user-table.component.ts","webpack:///./src/app/views/user/user.component.html","webpack:///./src/app/views/user/user.component.ts","webpack:///./src/app/views/user/user.module.ts","webpack:///./src/app/views/user/user.routing.ts"],"names":[],"mappings":"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","file":"views-user-user-module.js","sourcesContent":["module.exports = \"<mat-toolbar matDialogTitle class=\\\"mat-primary m-0\\\">\\r\\n  <div fxFlex fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <span class=\\\"title dialog-title\\\">{{data.title}}</span>\\r\\n  </div>\\r\\n</mat-toolbar>\\r\\n<mat-dialog-content class=\\\"mat-typography mt-1\\\" style=\\\"overflow: unset; max-height: unset;\\\">\\r\\n  <form [formGroup]=\\\"roleFormGroup\\\">\\r\\n    <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <input matInput required formControlName=\\\"name\\\" placeholder=\\\"Role Name\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <input matInput required formControlName=\\\"description\\\" placeholder=\\\"Description\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n    </div>\\r\\n  </form>\\r\\n\\r\\n  <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n    <div fxFlex=\\\"100\\\" class=\\\"pr-1\\\">\\r\\n      <span>Select Role Authorities</span>\\r\\n    </div>\\r\\n    <div fxFlex=\\\"100\\\" class=\\\"pr-1\\\">\\r\\n        <mat-tab-group>\\r\\n            <div *ngFor=\\\"let module of this.componentList; let i = index\\\">\\r\\n\\r\\n                <mat-tab label=\\\"{{module.name}}\\\" *ngIf=\\\"module.authorities.length !== 0\\\">\\r\\n\\r\\n                    <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" class=\\\"pt-2\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n                        <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\" style=\\\"padding-top: 5px;\\\">\\r\\n                            <mat-checkbox (change)=\\\"onChangeSelectAll(module.id, $event.checked)\\\"\\r\\n                                [indeterminate]=\\\"module.indeterminateState\\\" [checked]=\\\"module.selectAll\\\"\\r\\n                                class=\\\"full-width\\\">Select All</mat-checkbox>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"user-role-custom-popup-body\\\">\\r\\n                        <form [formGroup]=\\\"authoritiesFormGroup\\\">\\r\\n                            <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" class=\\\"pt-2\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n                                <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\" style=\\\"padding-top: 5px;\\\"\\r\\n                                    *ngFor=\\\"let item of module.authorities\\\">\\r\\n                                    <mat-checkbox [checked]=\\\"item.checked\\\"\\r\\n                                        (change)=\\\"onChangeUserRole(item, $event.checked)\\\" class=\\\"full-width\\\"\\r\\n                                        value=\\\"{{item.code}}\\\">{{item.name}}</mat-checkbox>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </form>\\r\\n                    </div>\\r\\n                </mat-tab>\\r\\n            </div>\\r\\n        </mat-tab-group>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions align=\\\"end\\\">\\r\\n  <button mat-raised-button color=\\\"accent\\\" [disabled]=\\\"this.newDisplayAuthority.length == 0 || roleFormGroup.invalid\\\"\\r\\n    (click)=\\\"submit()\\\" *ngIf=\\\"this.predefined === 'true'\\\">Save</button>\\r\\n  <button mat-raised-button color=\\\"accent\\\" [disabled]=\\\"this.selectedAuthorities.length == 0 || roleFormGroup.invalid\\\"\\r\\n    (click)=\\\"submit()\\\" *ngIf=\\\"this.predefined !== 'true'\\\">Save</button>\\r\\n  <span fxFlex></span>\\r\\n  <button mat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"dialogRef.close(false)\\\">Cancel</button>\\r\\n</mat-dialog-actions>\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { FormBuilder, Validators, FormGroup, FormArray, FormControl } from '@angular/forms';\r\nimport { UserService } from '../../user.service';\r\nimport { ClientService } from '../../../client/client.service';\r\nimport { AuthorityData, ClientData } from 'app/model/ClientModel.model';\r\n\r\n\r\n@Component({\r\n  selector: 'app-role-table-popup',\r\n  templateUrl: './role-table-popup.component.html'\r\n})\r\nexport class RoleTablePopupComponent implements OnInit {\r\n\r\n  public clientID;\r\n  public predefined;\r\n  public isNew;\r\n\r\n  public allAuthority = [];\r\n  public allDisplayAuthority = [];\r\n  public adminRoleDisplayAuthority = [];\r\n  public newDisplayAuthority = [];\r\n  public removedDisplayAuthority = [];\r\n  public commonAndAdminAuthorities = [];\r\n\r\n  public selectedAuthorities = [];\r\n  public componentList = [];\r\n  public adminComponentList = [];\r\n\r\n\r\n  public authoritiesFormGroup: FormGroup;\r\n  public roleFormGroup: FormGroup;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public dialogRef: MatDialogRef<RoleTablePopupComponent>,\r\n    private fb: FormBuilder,\r\n    private clientService: ClientService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    console.log(this.data);\r\n\r\n    this.clientID = this.data.clientID;\r\n    this.predefined = this.data.roleData.predefined;\r\n    this.isNew = this.data.roleData.isNew;\r\n    this.commonAndAdminAuthorities = this.data.commonAndAdminAuthorities;\r\n\r\n    if (this.isNew) {\r\n      this.createUserAuthorityComponentList(this.data.adminRoleAuthorities);\r\n    } else {\r\n      this.formatRoleAuthority(this.data.roleData);\r\n    }\r\n\r\n    this.buildRoleForms(this.data.roleData);\r\n    this.buildauthoritiesForm();\r\n  }\r\n\r\n\r\n  formatRoleAuthority(data) {\r\n    let roleData = JSON.parse(JSON.stringify(data));\r\n    roleData.authorities.forEach(authority => {\r\n      if (authority.type === 'U' || authority.type === 'D') {\r\n        this.selectedAuthorities.push(authority.id);\r\n      }\r\n    });\r\n    this.createUserAuthorityComponentList(this.data.adminRoleAuthorities);\r\n  }\r\n\r\n\r\n  createUserAuthorityComponentList(data) {\r\n    const roleData = JSON.parse(JSON.stringify(data));\r\n    let displayAuthoritySection = { name: \"Display Authority\", id: 'display_authority', selectAll: false, indeterminateState: false, authorities: [] };\r\n\r\n    roleData.forEach(section => {\r\n\r\n      let authorities: any[] = [];\r\n      section.authorities.forEach((authority) => {\r\n\r\n        if (authority.type === 'D') {\r\n          displayAuthoritySection.authorities.push(authority);\r\n        } else if (authority.type === 'U') {\r\n          authorities.push(authority);\r\n        }\r\n        let status = false;\r\n        if (this.selectedAuthorities.includes(authority.id)) {\r\n          status = true;\r\n        }\r\n        authority['checked'] = status;\r\n\r\n      });\r\n      section.authorities = authorities;\r\n      section['selectAll'] = false;\r\n      section['indeterminateState'] = false;\r\n      \r\n    });\r\n\r\n    roleData.splice(0, 0, displayAuthoritySection);\r\n    this.componentList = roleData;\r\n    console.log('-------------------------------------- componentList', this.componentList);\r\n    this.checkAllSelect();\r\n  }\r\n\r\n\r\n  /*\r\n  * Build New Role Form Group\r\n  * Created by Prasad Kumara\r\n  * 14/02/2019\r\n  */\r\n  buildRoleForms(item) {\r\n    this.roleFormGroup = this.fb.group({\r\n      name: [item.name || '', Validators.required],\r\n      description: [item.description || '', Validators.required]\r\n    });\r\n  }\r\n\r\n  /*\r\n  * Create New User Role Authorities Form Group\r\n  * Created by Prasad Kumara\r\n  * 14/02/2019\r\n  */\r\n  buildauthoritiesForm() {\r\n    this.authoritiesFormGroup = this.fb.group({\r\n      data: this.fb.array([])\r\n    });\r\n  }\r\n\r\n\r\n  submit() {\r\n\r\n    // Add Common Authorities --------------------------------------------------------------------------------\r\n    this.commonAndAdminAuthorities.forEach(authority => {\r\n      if (authority.type === 'C') {\r\n        this.selectedAuthorities.push(authority.id);\r\n      }\r\n    });\r\n    // ------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n    // create selected authorities (AuthorityData) array ------------------------------------------------------\r\n    let authorities: AuthorityData[] = [];\r\n    this.selectedAuthorities.forEach(authorityID => {\r\n      authorities.push(new AuthorityData(authorityID));\r\n    });\r\n    // --------------------------------------------------------------------------------------------------------\r\n\r\n\r\n    // create req ---------------------------------------------------------------------------------------------\r\n    const roleFormValue = this.roleFormGroup.value;\r\n    let roleData = {};\r\n    if (this.isNew) {\r\n      roleData = {\r\n        name: roleFormValue.name,\r\n        description: roleFormValue.description,\r\n        authorities: authorities,\r\n        client: new ClientData(this.clientID)\r\n      };\r\n    } else {\r\n      roleData = {\r\n        name: roleFormValue.name,\r\n        description: roleFormValue.description,\r\n        authorities: authorities,\r\n        removedAuthorities: this.removedDisplayAuthority,\r\n        localizedName: \"\"\r\n      };\r\n    }\r\n    // --------------------------------------------------------------------------------------------------------\r\n\r\n    console.log(roleData);\r\n\r\n    this.dialogRef.close(roleData);\r\n  }\r\n\r\n\r\n  onChangeUserRole(authority, isChecked: boolean) {\r\n\r\n    const dataArray = <FormArray>this.authoritiesFormGroup.controls.data;\r\n    if (isChecked) {\r\n      dataArray.push(new FormControl(authority.code));\r\n      this.selectedAuthorities.push(authority.id);\r\n      authority.checked = true;\r\n    } else {\r\n      const index = dataArray.controls.findIndex(x => x.value === authority.code);\r\n      dataArray.removeAt(index);\r\n      const i = this.selectedAuthorities.findIndex(y => y === authority.id);\r\n      this.selectedAuthorities.splice(i, 1);\r\n      authority.checked = false;\r\n    }\r\n\r\n    this.checkAllSelect();\r\n\r\n  }\r\n\r\n  \r\n  checkAllSelect() {\r\n\r\n    this.componentList.forEach(section => {\r\n      let selectedAuthoritiesCount = 0;\r\n      section.authorities.forEach(authority => {\r\n        if (authority.checked) {\r\n          selectedAuthoritiesCount++;\r\n        }\r\n      });\r\n      if (section.authorities.length === selectedAuthoritiesCount) {\r\n        section.selectAll = true;\r\n        section.indeterminateState = false;\r\n      } else if (selectedAuthoritiesCount === 0) {\r\n        section.selectAll = false;\r\n        section.indeterminateState = false;\r\n      } else {\r\n        section.selectAll = false;\r\n        section.indeterminateState = true;\r\n      }\r\n    });\r\n\r\n  }\r\n  \r\n  onChangeSelectAll(id, isChecked) {\r\n\r\n    this.componentList.forEach(section => {\r\n      if (section.id === id) {\r\n        section.authorities.forEach(authority => {\r\n          this.onChangeUserRole(authority, isChecked);\r\n        });\r\n      }\r\n    });\r\n    this.checkAllSelect();\r\n\r\n  }\r\n\r\n}\r\n","module.exports = \"<mat-card class=\\\"p-0\\\" [@animate]=\\\"{value:'*',params:{y:'50px',delay:'300ms'}}\\\">\\r\\n  <mat-card-title>\\r\\n    <div class=\\\"card-title-text\\\">Roles</div>\\r\\n    <mat-divider></mat-divider>\\r\\n\\r\\n    <div class=\\\"m-333\\\">\\r\\n      <button mat-raised-button class=\\\"mb-05 ml-05\\\" color=\\\"primary\\\" (click)=\\\"openPopUp({}, true)\\\"  [roleAuthorization]=\\\"'pur-c'\\\">Add Role</button>\\r\\n      <span fxFlex></span>\\r\\n      <p class=\\\"mat-select-lable\\\"> Page Size: </p>\\r\\n      <mat-select class=\\\"mat-raised-select\\\" [(value)]=\\\"pageSize\\\" (selectionChange)=\\\"changeValue()\\\">\\r\\n        <mat-option [value]=\\\"10\\\">10</mat-option>\\r\\n        <mat-option [value]=\\\"20\\\">20</mat-option>\\r\\n      </mat-select>\\r\\n    </div>\\r\\n\\r\\n  </mat-card-title>\\r\\n  <mat-card-content class=\\\"p-0\\\">\\r\\n\\r\\n    <ngx-datatable class=\\\"material ml-0 mr-0\\\" [rows]=\\\"roles\\\" [columnMode]=\\\"'flex'\\\" [headerHeight]=\\\"50\\\"\\r\\n      [footerHeight]=\\\"50\\\" [limit]=\\\"10\\\" [rowHeight]=\\\"'auto'\\\">\\r\\n      <ngx-datatable-column name=\\\"Role Name\\\" [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          {{ row?.name }}\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n\\r\\n      <ngx-datatable-column name=\\\"Actions\\\" [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n\\r\\n          <span fxFlex></span>\\r\\n          <button class=\\\"card-control\\\" mat-icon-button [matMenuTriggerFor]=\\\"menu\\\">\\r\\n            <mat-icon>more_vert</mat-icon>\\r\\n          </button>\\r\\n          <mat-menu #menu=\\\"matMenu\\\">\\r\\n            <button mat-menu-item (click)=\\\"editRole(row)\\\" [roleAuthorization]=\\\"'pur-u'\\\">\\r\\n              <mat-icon>edit</mat-icon>Edit\\r\\n            </button>\\r\\n            <button mat-menu-item (click)=\\\"deleteRole(row)\\\" [roleAuthorization]=\\\"'pur-d'\\\">\\r\\n              <mat-icon>delete</mat-icon>Delete\\r\\n            </button>\\r\\n          </mat-menu>\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n\\r\\n    </ngx-datatable>\\r\\n\\r\\n  </mat-card-content>\\r\\n</mat-card>\"","import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { UserService } from \"../user.service\";\r\nimport { ClientService } from \"../../client/client.service\";\r\nimport { MatDialogRef, MatDialog, MatSnackBar } from \"@angular/material\";\r\nimport { AppConfirmService } from \"../../../shared/services/app-confirm/app-confirm.service\";\r\nimport { AppLoaderService } from \"../../../shared/services/app-loader/app-loader.service\";\r\nimport { RoleTablePopupComponent } from \"./role-table-popup/role-table-popup.component\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { egretAnimations } from \"../../../shared/animations/egret-animations\";\r\nimport { AppErrorService } from \"../../../shared/services/app-error/app-error.service\";\r\nimport { NavigationExtras, Router } from \"@angular/router\";\r\nimport { AuthenticationService } from \"app/views/sessions/authentication.service\";\r\n\r\n@Component({\r\n  selector: \"app-role-table\",\r\n  templateUrl: \"./role-table.component.html\",\r\n  animations: egretAnimations\r\n})\r\nexport class RoleTableComponent implements OnInit, OnDestroy {\r\n  public pageSize = 10;\r\n\r\n  public roles: any[];\r\n  public adminRoleId;\r\n  public adminRoleAuthorities;\r\n  public commonAndAdminAuthorities = [];\r\n\r\n  public componentList = [];\r\n  public editRoleId: String;\r\n  public clientId;\r\n\r\n  public getItemSub: Subscription;\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private snack: MatSnackBar,\r\n    private clientService: ClientService,\r\n    private confirmService: AppConfirmService,\r\n    private loader: AppLoaderService,\r\n    private errDialog: AppErrorService,\r\n    private authService: AuthenticationService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    const currentUser = this.authService.getLoggedUserDetail();\r\n    if (currentUser) {\r\n      this.clientId = currentUser.userData.client.id;\r\n      this.getClientRoles();\r\n      this.getCommonAndAdminAuthorities();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.getItemSub) {\r\n      this.getItemSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  getClientRoles() {\r\n    this.getItemSub = this.clientService.getClient(this.clientId).subscribe(successResp => {\r\n      this.roles = successResp.content.roles;\r\n      this.roles.forEach((role, index) => {\r\n        if (role.predefined === 'true') {\r\n          this.adminRoleId = role.id;\r\n          this.roles.splice(index, 1);\r\n        }\r\n      });\r\n    },\r\n      error => {\r\n        this.errDialog.showError(error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  getCommonAndAdminAuthorities() {\r\n    this.clientService.getCommonAndAdminAuthority().subscribe(response => {\r\n      response.content.forEach(section => {\r\n        section.authorities.forEach(authority => {\r\n          this.commonAndAdminAuthorities.push(authority);\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  openPopUp(roleData: any = {}, isNew?) {\r\n\r\n    this.clientService.getAdminAuthority(this.adminRoleId).subscribe(response => {\r\n      this.adminRoleAuthorities = response.content;\r\n      let title = isNew ? \"Create New User Role\" : \"Update User Role\";\r\n      roleData[\"isNew\"] = isNew;\r\n      let dialogRef: MatDialogRef<any> = this.dialog.open(\r\n        RoleTablePopupComponent,\r\n        {\r\n          width: \"900px\",\r\n          disableClose: true,\r\n          data: {\r\n            title: title,\r\n            roleData: roleData,\r\n            clientID: this.clientId,\r\n            adminRoleAuthorities: this.adminRoleAuthorities,\r\n            commonAndAdminAuthorities: this.commonAndAdminAuthorities\r\n          }\r\n        }\r\n      );\r\n      dialogRef.afterClosed().subscribe(res => {\r\n        if (!res) {\r\n          // If user press cancel\r\n          return;\r\n        }\r\n        this.loader.open();\r\n        if (isNew) {\r\n          // console.log('------------ create user role object ---------------');\r\n          console.log(res);\r\n          this.clientService.createNewRole(res).subscribe(response => {\r\n            // console.log('--------------- create user role response ----------------');\r\n            // console.log(response);\r\n            this.snack.open('User Role Created', 'close', {\r\n              duration: 2000\r\n            });\r\n            this.getClientRoles();\r\n          },\r\n            error => {\r\n              this.errDialog.showError(error);\r\n            });\r\n        } else {\r\n          console.log('------------ update user role object ---------------');\r\n          console.log(res);\r\n          this.clientService.updateRloe(this.editRoleId, res).subscribe(\r\n            response => {\r\n              // console.log('--------------- create user role response ----------------');\r\n              // console.log(response);\r\n              this.snack.open(\"User Role Updated\", \"close\", {\r\n                duration: 2000\r\n              });\r\n              this.getClientRoles();\r\n            },\r\n            error => {\r\n              this.errDialog.showError(error);\r\n            });\r\n        }\r\n        this.loader.close();\r\n      });\r\n    });\r\n  }\r\n\r\n  editRole(role) {\r\n    this.editRoleId = role.id;\r\n    this.clientService.getRoleAuthorities(role.id).subscribe(\r\n      response => {\r\n        const roleData = {\r\n          name: response.content.name,\r\n          description: response.content.description,\r\n          predefined: response.content.predefined,\r\n          authorities: response.content.authorities\r\n        };\r\n        this.openPopUp(roleData, false);\r\n      },\r\n      error => {\r\n        this.errDialog.showError(error);\r\n      });\r\n  }\r\n\r\n  /*\r\n   * Delete User Role\r\n   * Created by Prasad Kumara\r\n   * 14/02/2019\r\n   */\r\n  deleteRole(row) {\r\n    this.confirmService\r\n      .confirm({ message: `Delete ${row.name}?` })\r\n      .subscribe(res => {\r\n        if (res) {\r\n          // this.loader.open();\r\n          this.getClientRoles();\r\n        }\r\n      });\r\n  }\r\n}\r\n\r\n","module.exports = \"<mat-toolbar matDialogTitle class=\\\"mat-primary m-0\\\">\\r\\n  <div fxFlex fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <span class=\\\"title dialog-title\\\">Category</span>\\r\\n  </div>\\r\\n</mat-toolbar>\\r\\n<mat-dialog-content class=\\\"mat-typography mt-1\\\">\\r\\n\\r\\n  <mat-form-field class=\\\"matAutocomplete-chip-list\\\">\\r\\n\\r\\n    <mat-chip-list #chipList>\\r\\n      <mat-chip *ngFor=\\\"let category of selectedCategories\\\" [selectable]=\\\"selectable\\\" [removable]=\\\"removable\\\"\\r\\n        (removed)=\\\"remove(category)\\\">\\r\\n        {{category.name}}\\r\\n        <mat-icon matChipRemove *ngIf=\\\"removable\\\">cancel</mat-icon>\\r\\n      </mat-chip>\\r\\n      <input matInput placeholder=\\\"Select category...\\\" #categoryInput [formControl]=\\\"categoryCtrl\\\"\\r\\n        [matAutocomplete]=\\\"auto\\\" [matChipInputFor]=\\\"chipList\\\" [matChipInputSeparatorKeyCodes]=\\\"separatorKeysCodes\\\"\\r\\n        (matChipInputTokenEnd)=\\\"add($event)\\\" [matChipInputAddOnBlur]=\\\"addOnBlur\\\"\\r\\n        aria-label=\\\"Category\\\">\\r\\n    </mat-chip-list>\\r\\n\\r\\n    <mat-autocomplete #auto=\\\"matAutocomplete\\\" (optionSelected)=\\\"selected($event)\\\">\\r\\n      <mat-option *ngFor=\\\"let category of filteredCategories | async\\\" [value]=\\\"category.id\\\">\\r\\n        <span>{{category.name}}</span>\\r\\n      </mat-option>\\r\\n    </mat-autocomplete>\\r\\n\\r\\n  </mat-form-field>\\r\\n\\r\\n  <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"mt-1\\\">\\r\\n    <div fxFlex=\\\"100\\\" class=\\\"mt-1\\\">\\r\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"submit()\\\">Save</button>\\r\\n      <span fxFlex></span>\\r\\n      <button mat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"dialogRef.close(false)\\\">Cancel</button>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n</mat-dialog-content>\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { FormBuilder, Validators, FormGroup, FormControl } from '@angular/forms';\r\n\r\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\r\nimport { ElementRef, ViewChild } from '@angular/core';\r\nimport { MatAutocompleteSelectedEvent, MatChipInputEvent, MatAutocomplete } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { autoCompletableCategory } from 'app/model/ClientModel.model';\r\n\r\n\r\n@Component({\r\n  selector: 'app-user-category-popup',\r\n  templateUrl: './user-category-popup.component.html'\r\n})\r\nexport class UserCategoryPopupComponent implements OnInit {\r\n  selectable = true;\r\n  removable = true;\r\n  addOnBlur = true;\r\n  separatorKeysCodes: number[] = [ENTER, COMMA];\r\n  categoryCtrl = new FormControl();\r\n  allCategories: autoCompletableCategory[] = [];\r\n  filteredCategories: Observable<autoCompletableCategory[]>;\r\n  selectedCategories: autoCompletableCategory[] = [];\r\n\r\n  @ViewChild('categoryInput') categoryInput: ElementRef<HTMLInputElement>;\r\n  @ViewChild('auto') matAutocomplete: MatAutocomplete;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public dialogRef: MatDialogRef<UserCategoryPopupComponent>,\r\n    private fb: FormBuilder,\r\n  ) {\r\n    this.filteredCategories = this.categoryCtrl.valueChanges\r\n      .pipe(\r\n        startWith(null),\r\n        map(category => category ? this._filterCategories(category) : this.allCategories.slice())\r\n      );\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    this.allCategories = JSON.parse(JSON.stringify(this.data.category));\r\n    this.selectedCategories = [];\r\n    if (this.data.selectedCategory.length > 0) {\r\n      this.data.selectedCategory.forEach(element => {\r\n        this.addSelectedCategory(element.id)\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  submit() {\r\n    this.dialogRef.close(this.selectedCategories);\r\n  }\r\n\r\n  add(event: MatChipInputEvent): void {\r\n\r\n    if (!this.matAutocomplete.isOpen) {\r\n      const input = event.input;\r\n      const value = event.value;\r\n\r\n      // if we need to add custom texts as Chips,\r\n      // Add our category\r\n      // if ((value || '').trim()) {\r\n      //   this.categories.push(value.trim());\r\n      // }\r\n\r\n      // Reset the input value\r\n      if (input) {\r\n        input.value = '';\r\n      }\r\n\r\n      this.categoryCtrl.setValue(null);\r\n    }\r\n    \r\n  }\r\n\r\n  selected(event: MatAutocompleteSelectedEvent): void {\r\n    this.addSelectedCategory(event.option.value);\r\n    this.categoryInput.nativeElement.value = '';\r\n    this.categoryCtrl.setValue(null);\r\n  }\r\n\r\n  addSelectedCategory(id) {\r\n    this.allCategories.forEach((item, index) => {\r\n      if (item.id === id) {\r\n        this.selectedCategories.push(item);\r\n        this.allCategories.splice(index, 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  remove(category: autoCompletableCategory): void {\r\n    this.selectedCategories.forEach((item, index) => {\r\n      if (item.id === category.id) {\r\n        this.allCategories.push(category);\r\n        this.selectedCategories.splice(index, 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  private _filterCategories(value: string): autoCompletableCategory[] {\r\n    const filterValue = value.toLowerCase();\r\n    return this.allCategories.filter(category => category.name.toLowerCase().indexOf(filterValue) === 0);\r\n  }\r\n\r\n}\r\n","module.exports = \"<mat-toolbar matDialogTitle class=\\\"mat-primary m-0\\\">\\r\\n  <div fxFlex fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <span class=\\\"title dialog-title\\\">Community</span>\\r\\n  </div>\\r\\n</mat-toolbar>\\r\\n<mat-dialog-content class=\\\"mat-typography mt-1\\\" style=\\\"overflow: unset; max-height: unset;\\\">\\r\\n\\r\\n  <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"mt-3\\\" *ngIf=\\\"allCommunities.length !== 0\\\">\\r\\n    <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\" *ngFor=\\\"let community of allCommunities\\\">\\r\\n      <mat-checkbox [checked]=\\\"community.isChecked\\\" (change)=\\\"onChange($event)\\\" class=\\\"full-width\\\"\\r\\n        [value]=\\\"community.id\\\">\\r\\n        {{community.name}}</mat-checkbox>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"alert alert-warning\\\" role=\\\"alert\\\" *ngIf=\\\"allCommunities.length === 0\\\">\\r\\n    Client has no any assigned communities.!\\r\\n  </div>\\r\\n\\r\\n  <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"mt-2\\\">\\r\\n    <div fxFlex=\\\"100\\\" class=\\\"mt-1\\\">\\r\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"submit()\\\" *ngIf=\\\"allCommunities.length !== 0\\\">Save</button>\\r\\n      <span fxFlex></span>\\r\\n      <button mat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"dialogRef.close(false)\\\">Cancel</button>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n</mat-dialog-content>\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatCheckboxChange } from '@angular/material';\r\nimport { FormBuilder, Validators, FormGroup, FormControl } from '@angular/forms';\r\n\r\n\r\n@Component({\r\n  selector: 'app-user-community-popup',\r\n  templateUrl: './user-community-popup.component.html'\r\n})\r\nexport class UserCommunityPopupComponent implements OnInit {\r\n\r\n\r\n  allCommunities = [];\r\n  selectedCommunities = [];\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public dialogRef: MatDialogRef<UserCommunityPopupComponent>,\r\n    private fb: FormBuilder,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n    this.allCommunities = JSON.parse(JSON.stringify(this.data.community));\r\n    this.selectedCommunities = this.data.selectedCommunity;\r\n\r\n    this.allCommunities.forEach(element => {\r\n      if (this.selectedCommunities.length > 0) {\r\n        let status = false;\r\n        this.selectedCommunities.forEach(community => {\r\n          if (community.id.indexOf(element.id) === 0) {\r\n            status = true;\r\n          }\r\n          element['isChecked'] = status;\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  onChange(event: MatCheckboxChange): void {\r\n    if (event.checked) {\r\n      this.allCommunities.forEach((item) => {\r\n        if (item.id === event.source.value) {\r\n          this.selectedCommunities.push(item);\r\n        }\r\n      });\r\n    } else {\r\n      this.selectedCommunities.forEach((item, index) => {\r\n        if (item.id === event.source.value) {\r\n          this.selectedCommunities.splice(index, 1);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  submit() {\r\n    this.dialogRef.close(this.selectedCommunities);\r\n  }\r\n}","module.exports = \"<mat-toolbar matDialogTitle class=\\\"mat-primary m-0\\\">\\r\\n  <div fxFlex fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <span class=\\\"title dialog-title\\\">Create User</span>\\r\\n  </div>\\r\\n</mat-toolbar>\\r\\n<mat-dialog-content class=\\\"mat-typography mt-1\\\" id=\\\"client-create\\\">\\r\\n\\r\\n\\r\\n  <mat-horizontal-stepper [linear]=\\\"true\\\">\\r\\n\\r\\n    <mat-step [stepControl]=\\\"userFormGroup\\\">\\r\\n\\r\\n      <form [formGroup]=\\\"userFormGroup\\\">\\r\\n\\r\\n        <ng-template matStepLabel>Client</ng-template>\\r\\n\\r\\n\\r\\n        <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"mt-1\\\">\\r\\n\\r\\n          <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <input matInput name=\\\"username\\\" [formControl]=\\\"userFormGroup.controls['username']\\\" placeholder=\\\"User Name\\\">\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <input matInput name=\\\"password\\\" type=\\\"password\\\" [formControl]=\\\"userFormGroup.controls['password']\\\"\\r\\n                placeholder=\\\"Password (Minimum 8 Characters)\\\">\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <input matInput name=\\\"email\\\" [formControl]=\\\"userFormGroup.controls['email']\\\" placeholder=\\\"Email\\\">\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <mat-select [formControl]=\\\"userFormGroup.controls['role']\\\" placeholder=\\\"Select A User Role\\\">\\r\\n                <mat-option>none</mat-option>\\r\\n                <mat-option *ngFor=\\\"let roles of roles\\\" [value]=\\\"roles.id\\\">{{roles.name}}</mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"mt-1\\\">\\r\\n          <div fxFlex=\\\"100\\\" class=\\\"mt-1\\\">\\r\\n            <button mat-raised-button color=\\\"primary\\\" matStepperNext>Next</button>\\r\\n            <span fxFlex></span>\\r\\n            <button mat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"dialogRef.close(false)\\\">Cancel</button>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n      </form>\\r\\n\\r\\n    </mat-step>\\r\\n\\r\\n\\r\\n    <mat-step [stepControl]=\\\"categoryFormGroup\\\">\\r\\n      <form [formGroup]=\\\"categoryFormGroup\\\">\\r\\n        <ng-template matStepLabel>Category</ng-template>\\r\\n\\r\\n        <mat-form-field class=\\\"matAutocomplete-chip-list\\\">\\r\\n          <mat-chip-list #chipList>\\r\\n            <mat-chip *ngFor=\\\"let category of selectedCategories\\\" [selectable]=\\\"selectable\\\" [removable]=\\\"removable\\\"\\r\\n              (removed)=\\\"remove(category)\\\">\\r\\n              {{category.name}}\\r\\n              <mat-icon matChipRemove *ngIf=\\\"removable\\\">cancel</mat-icon>\\r\\n            </mat-chip>\\r\\n            <input matInput placeholder=\\\"Select category...\\\" #categoryInput [formControl]=\\\"categoryCtrl\\\"\\r\\n              [matAutocomplete]=\\\"auto\\\" [matChipInputFor]=\\\"chipList\\\" [matChipInputSeparatorKeyCodes]=\\\"separatorKeysCodes\\\"\\r\\n              (matChipInputTokenEnd)=\\\"add($event)\\\" [matChipInputAddOnBlur]=\\\"addOnBlur\\\" aria-label=\\\"Category\\\" [required]=\\\"this.selectedCategories.length === 0\\\">\\r\\n          </mat-chip-list>\\r\\n\\r\\n          <mat-autocomplete #auto=\\\"matAutocomplete\\\" (optionSelected)=\\\"selected($event)\\\">\\r\\n            <mat-option *ngFor=\\\"let category of filteredCategories | async\\\" [value]=\\\"category.id\\\">\\r\\n              <span>{{category.name}}</span>\\r\\n            </mat-option>\\r\\n          </mat-autocomplete>\\r\\n\\r\\n        </mat-form-field>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"mt-1\\\">\\r\\n          <div fxFlex=\\\"100\\\" class=\\\"mt-1\\\">\\r\\n            <button mat-raised-button color=\\\"accent\\\" matStepperPrevious class=\\\"mr-1\\\">Back</button>\\r\\n            <button mat-raised-button color=\\\"primary\\\" matStepperNext [disabled]=\\\"this.selectedCategories.length == 0\\\">Next</button>\\r\\n            <span fxFlex></span>\\r\\n            <button mat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"dialogRef.close(false)\\\">Cancel</button>\\r\\n          </div>\\r\\n        </div>\\r\\n      </form>\\r\\n    </mat-step>\\r\\n\\r\\n    <mat-step [stepControl]=\\\"communityFormGroup\\\">\\r\\n      <form [formGroup]=\\\"communityFormGroup\\\">\\r\\n        <ng-template matStepLabel>Community</ng-template>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"mt-1\\\">\\r\\n\\r\\n          <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"\\\" *ngIf=\\\"allCommunities.length !== 0\\\">\\r\\n            <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\" *ngFor=\\\"let community of allCommunities\\\">\\r\\n              <mat-checkbox [checked]=\\\"community.isChecked\\\" (change)=\\\"onChange($event)\\\" class=\\\"full-width\\\" [value]=\\\"community.id\\\">\\r\\n                {{community.name}}</mat-checkbox>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"alert alert-warning\\\" role=\\\"alert\\\" *ngIf=\\\"allCommunities.length === 0\\\">\\r\\n            Client has no any assigned communities.!\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"mt-1\\\">\\r\\n          <div fxFlex=\\\"100\\\" class=\\\"mt-1\\\">\\r\\n            <button mat-raised-button color=\\\"accent\\\" matStepperPrevious class=\\\"mr-1\\\">Back</button>\\r\\n            <button mat-raised-button color=\\\"primary\\\" (click)=\\\"submit()\\\">Submit</button>\\r\\n            <span fxFlex></span>\\r\\n            <button mat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"dialogRef.close(false)\\\">Cancel</button>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n      </form>\\r\\n    </mat-step>\\r\\n\\r\\n  </mat-horizontal-stepper>\\r\\n\\r\\n\\r\\n</mat-dialog-content>\"","import { Component, OnInit, Inject, ViewChild, ElementRef } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatSnackBar, MatAutocomplete, MatAutocompleteSelectedEvent, MatChipInputEvent, MatCheckboxChange } from '@angular/material';\r\nimport { FormBuilder, Validators, FormGroup, FormControl } from '@angular/forms';\r\nimport { egretAnimations } from \"../../../../shared/animations/egret-animations\";\r\nimport { GlobalVariable } from \"../../../../shared/helpers/global-variable\";\r\nimport { Observable } from 'rxjs';\r\nimport { startWith, map } from 'rxjs/operators';\r\nimport { ENTER, COMMA } from '@angular/cdk/keycodes';\r\nimport { autoCompletableCategory } from 'app/model/ClientModel.model';\r\n\r\n\r\n@Component({\r\n  selector: 'app-user-create-popup',\r\n  templateUrl: './user-create-popup.component.html',\r\n  animations: egretAnimations,\r\n})\r\nexport class UserCreatePopupComponent implements OnInit {\r\n\r\n  public globalVariable: GlobalVariable = new GlobalVariable();\r\n  public license = this.globalVariable.client.license;\r\n  public regex = this.globalVariable.validators.regex;\r\n\r\n  public userFormGroup: FormGroup;\r\n  public categoryFormGroup: FormGroup;\r\n  public communityFormGroup: FormGroup;\r\n  public licenseFormGroup: FormGroup;\r\n  // public formStatus = false;\r\n\r\n  public roles;\r\n\r\n  selectable = true;\r\n  removable = true;\r\n  addOnBlur = true;\r\n  separatorKeysCodes: number[] = [ENTER, COMMA];\r\n  categoryCtrl = new FormControl();\r\n  allCategories: autoCompletableCategory[] = [];\r\n  filteredCategories: Observable<autoCompletableCategory[]>;\r\n  selectedCategories: autoCompletableCategory[] = [];\r\n\r\n  allCommunities = [];\r\n  selectedCommunities = [];\r\n\r\n  @ViewChild('categoryInput') categoryInput: ElementRef<HTMLInputElement>;\r\n  @ViewChild('auto') matAutocomplete: MatAutocomplete;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public dialogRef: MatDialogRef<UserCreatePopupComponent>,\r\n    private fb: FormBuilder,\r\n    public snackBar: MatSnackBar\r\n  ) {\r\n    this.filteredCategories = this.categoryCtrl.valueChanges\r\n      .pipe(\r\n        startWith(null),\r\n        map(category => category ? this._filterCategories(category) : this.allCategories.slice())\r\n      );\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.roles = this.data.roles;\r\n    this.allCategories = JSON.parse(JSON.stringify(this.data.category));\r\n\r\n    this.allCommunities = JSON.parse(JSON.stringify(this.data.community));\r\n    this.buildItemForm()\r\n  }\r\n\r\n  buildItemForm() {\r\n\r\n    // this.userFormGroup = this.fb.group({\r\n    //   username: new FormControl(''),\r\n    //   password: new FormControl(''),\r\n    //   email: new FormControl(''),\r\n    //   role: new FormControl('')\r\n    // });\r\n\r\n    this.userFormGroup = this.fb.group({\r\n      username: new FormControl('', Validators.required),\r\n      password: new FormControl('', [Validators.required, Validators.pattern('[A-Za-z\\d$@$!%*?&].{7,}')]),\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      role: new FormControl('', Validators.required)\r\n    });\r\n    this.categoryFormGroup = this.fb.group({\r\n      category: this.categoryCtrl\r\n    });\r\n    this.communityFormGroup = this.fb.group({\r\n      username: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    let forms = [this.userFormGroup.value, this.selectedCategories, this.selectedCommunities];\r\n    this.userFormGroup.reset();\r\n    this.dialogRef.close(forms);\r\n  }\r\n\r\n  add(event: MatChipInputEvent): void {\r\n\r\n    if (!this.matAutocomplete.isOpen) {\r\n      const input = event.input;\r\n      const value = event.value;\r\n\r\n      // if we need to add custom texts as Chips,\r\n      // Add our category\r\n      // if ((value || '').trim()) {\r\n      //   this.categories.push(value.trim());\r\n      // }\r\n\r\n      // Reset the input value\r\n      if (input) {\r\n        input.value = '';\r\n      }\r\n\r\n      this.categoryCtrl.setValue(null);\r\n    }\r\n  }\r\n\r\n  selected(event: MatAutocompleteSelectedEvent): void {\r\n    this.addSelectedCategory(event.option.value);\r\n    this.categoryInput.nativeElement.value = '';\r\n    this.categoryCtrl.setValue(null);\r\n  }\r\n\r\n  addSelectedCategory(id) {\r\n    this.allCategories.forEach((item, index) => {\r\n      if (item.id === id) {\r\n        this.selectedCategories.push(item);\r\n        this.allCategories.splice(index, 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  remove(category: autoCompletableCategory): void {\r\n    this.selectedCategories.forEach((item, index) => {\r\n      if (item.id === category.id) {\r\n        this.allCategories.push(category);\r\n        this.selectedCategories.splice(index, 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Community checkbox onchange event\r\n  onChange(event: MatCheckboxChange): void {\r\n    if (event.checked) {\r\n      this.allCommunities.forEach((item) => {\r\n        if (item.id === event.source.value) {\r\n          this.selectedCommunities.push(item);\r\n        }\r\n      });\r\n    } else {\r\n      this.selectedCommunities.forEach((item, index) => {\r\n        if (item.id === event.source.value) {\r\n          this.selectedCommunities.splice(index, 1);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private _filterCategories(value: string): autoCompletableCategory[] {\r\n    const filterValue = value.toLowerCase();\r\n    return this.allCategories.filter(category => category.name.toLowerCase().indexOf(filterValue) === 0);\r\n  }\r\n\r\n}\r\n\r\n\r\n","module.exports = \"<!-- <form [formGroup]=\\\"itemForm\\\" (ngSubmit)=\\\"submit()\\\">\\r\\n  <mat-toolbar matDialogTitle class=\\\"mat-primary m-0\\\">\\r\\n    <div fxFlex fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\r\\n      <span class=\\\"title dialog-title\\\">{{data.title}}</span>\\r\\n    </div>\\r\\n  </mat-toolbar>\\r\\n  <mat-dialog-content class=\\\"mat-typography mt-1\\\">\\r\\n    <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"mt-1\\\">\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <input matInput name=\\\"username\\\" [formControl]=\\\"itemForm.controls['username']\\\" placeholder=\\\"User Name\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\" *ngIf=\\\"formStatus\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <input matInput name=\\\"password\\\" type=\\\"password\\\" [formControl]=\\\"itemForm.controls['password']\\\"\\r\\n            positiveNumberAndLetterOnly placeholder=\\\"Password\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <input matInput name=\\\"email\\\" [formControl]=\\\"itemForm.controls['email']\\\" placeholder=\\\"Email\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <mat-select [formControl]=\\\"itemForm.controls['role']\\\" placeholder=\\\"Select A User Role\\\">\\r\\n            <mat-option>none</mat-option>\\r\\n            <mat-option *ngFor=\\\"let roles of roles\\\" [value]=\\\"roles.id\\\">{{roles.name}}</mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n      <div fxFlex=\\\"100\\\" class=\\\"mt-1\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"itemForm.invalid\\\">Save</button>\\r\\n        <span fxFlex></span>\\r\\n        <button mat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"dialogRef.close(false)\\\">Cancel</button>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n  </mat-dialog-content>\\r\\n</form> -->\\r\\n\\r\\n\\r\\n<form [formGroup]=\\\"itemForm\\\" (ngSubmit)=\\\"submit()\\\">\\r\\n  <mat-toolbar matDialogTitle class=\\\"mat-primary m-0\\\">\\r\\n    <div fxFlex fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\r\\n      <span class=\\\"title dialog-title\\\">Update User</span>\\r\\n    </div>\\r\\n  </mat-toolbar>\\r\\n  <mat-dialog-content class=\\\"mat-typography mt-1\\\">\\r\\n    <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"mt-1\\\">\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <input matInput name=\\\"username\\\" [formControl]=\\\"itemForm.controls['username']\\\" placeholder=\\\"User Name\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <input matInput name=\\\"email\\\" [formControl]=\\\"itemForm.controls['email']\\\" placeholder=\\\"Email\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <mat-select [formControl]=\\\"itemForm.controls['role']\\\" placeholder=\\\"Select A User Role\\\"\\r\\n            [disabled]=\\\"roleStatus\\\">\\r\\n            <mat-option>none</mat-option>\\r\\n            <mat-option *ngFor=\\\"let roles of roles\\\" [value]=\\\"roles.id\\\">{{roles.name}}</mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pt-1 pr-1\\\">\\r\\n        <mat-slide-toggle color=\\\"primary\\\" [formControl]=\\\"itemForm.controls['status']\\\" [(ngModel)]=\\\"isActive\\\"\\r\\n          (change)=\\\"changeUserStatus()\\\">\\r\\n          User Status : <mat-chip color=\\\"{{statusArray[userStatus].style}}\\\" selected>\\r\\n            {{statusArray[userStatus].display}}</mat-chip>\\r\\n        </mat-slide-toggle>\\r\\n      </div>\\r\\n      <div fxFlex=\\\" 100\\\" class=\\\"mt-1\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"itemForm.invalid\\\">Save</button>\\r\\n        <span fxFlex></span>\\r\\n        <button mat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"dialogRef.close(false)\\\">Cancel</button>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n  </mat-dialog-content>\\r\\n</form>\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { FormBuilder, Validators, FormGroup, FormControl } from '@angular/forms';\r\nimport { GlobalVariable } from 'app/shared/helpers/global-variable';\r\n\r\n@Component({\r\n  selector: 'app-user-table-popup',\r\n  templateUrl: './user-table-popup.component.html'\r\n})\r\nexport class UserTablePopupComponent implements OnInit {\r\n\r\n  public itemForm: FormGroup;\r\n  public roles: any[] = [];\r\n  public roleStatus = false;\r\n  public isActive;\r\n  public userStatus;\r\n  public oldUserStatus;\r\n  public statusArray = new GlobalVariable().common.matChip.userStatus;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public dialogRef: MatDialogRef<UserTablePopupComponent>,\r\n    private fb: FormBuilder,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.roles = this.data.roles;\r\n    this.buildItemForm(this.data.payload);\r\n  }\r\n\r\n  buildItemForm(item) {\r\n\r\n    let role = null;\r\n    if (item.id !== undefined) {\r\n      console.log(item);\r\n      role = item.role.id;\r\n      this.userStatus = this.oldUserStatus = item.status;\r\n      this.isActive = item.status === \"ACTIVE\" ? true : false;\r\n    }\r\n\r\n    this.itemForm = this.fb.group({\r\n      username: new FormControl(item.accountName || '', Validators.required),\r\n      email: new FormControl(item.email || '', [Validators.required, Validators.email]),\r\n      role: new FormControl(role, Validators.required),\r\n      status: new FormControl(this.isActive)\r\n    })\r\n\r\n  }\r\n\r\n  changeUserStatus() {\r\n    if (this.isActive) {\r\n      this.userStatus = \"ACTIVE\";\r\n    } else {\r\n      if(this.oldUserStatus === \"ACTIVE\"){\r\n        this.userStatus = \"INACTIVE\";\r\n      } else {\r\n        this.userStatus = this.oldUserStatus;\r\n      }\r\n    }\r\n  }\r\n\r\n  submit() {\r\n    this.itemForm.value.status = this.userStatus; \r\n    this.dialogRef.close(this.itemForm.value);\r\n  }\r\n}\r\n","module.exports = \"<!-- <mat-card class=\\\"p-0\\\" [@animate]=\\\"{value:'*',params:{y:'50px',delay:'300ms'}}\\\">\\r\\n  <mat-card-title>\\r\\n\\r\\n    <div class=\\\"m-333 mt-3\\\">\\r\\n      <button mat-raised-button class=\\\"mb-05 ml-05\\\" color=\\\"primary\\\" (click)=\\\"openUserCreatePopup()\\\"\\r\\n        [roleAuthorization]=\\\"'pu-c'\\\">Add User</button>\\r\\n      <span fxFlex></span>\\r\\n      <p class=\\\"mat-select-lable\\\"> Page Size: </p>\\r\\n      <mat-select class=\\\"mat-raised-select\\\" [(value)]=\\\"pageSize\\\" (selectionChange)=\\\"changeValue()\\\">\\r\\n        <mat-option [value]=\\\"10\\\">10</mat-option>\\r\\n        <mat-option [value]=\\\"20\\\">20</mat-option>\\r\\n      </mat-select>\\r\\n    </div>\\r\\n\\r\\n\\r\\n  </mat-card-title>\\r\\n  <mat-card-content class=\\\"p-0\\\">\\r\\n\\r\\n    <ngx-datatable class=\\\"material ml-0 mr-0\\\" [rows]=\\\"users\\\" [columnMode]=\\\"'force'\\\" [headerHeight]=\\\"50\\\"\\r\\n      [footerHeight]=\\\"50\\\" [limit]=\\\"10\\\" [rowHeight]=\\\"'auto'\\\">\\r\\n\\r\\n      <ngx-datatable-column name=\\\"\\\" [flexGrow]=\\\"1\\\" [maxWidth]=\\\"80\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          <img mat-list-avatar class=\\\"\\\" src=\\\"assets/images/face-1.jpg\\\" alt=\\\"\\\"\\r\\n            style=\\\"flex-shrink: 0; width: 40px; height: 40px; border-radius: 50%; object-fit: cover;\\\">\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n\\r\\n      <ngx-datatable-column name=\\\"Name\\\" [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          {{ row?.userName }}\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n\\r\\n      <ngx-datatable-column name=\\\"Email\\\" [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          {{ row?.email }}\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n\\r\\n      <ngx-datatable-column name=\\\"Role\\\" [flexGrow]=\\\"1\\\" [maxWidth]=\\\"150\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          <mat-chip mat-sm-chip color=\\\"warn\\\" [selected]=\\\"true\\\">{{row?.role.name}}</mat-chip>\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n\\r\\n      <ngx-datatable-column name=\\\"Status\\\" [flexGrow]=\\\"1\\\" [maxWidth]=\\\"150\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          <mat-chip mat-sm-chip color=\\\"{{statusArray[row?.status].style}}\\\" selected>{{statusArray[row?.status].display}}</mat-chip>\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n\\r\\n\\r\\n      <ngx-datatable-column name=\\\"Actions\\\" [flexGrow]=\\\"1\\\" [maxWidth]=\\\"80\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          <button class=\\\"card-control\\\" mat-icon-button [matMenuTriggerFor]=\\\"menu1\\\">\\r\\n            <mat-icon>more_vert</mat-icon>\\r\\n          </button>\\r\\n          <mat-menu #menu1=\\\"matMenu\\\">\\r\\n            <button mat-menu-item (click)=\\\"openEditPopUp(row)\\\" [roleAuthorization]=\\\"'pu-u'\\\">\\r\\n              <mat-icon>edit</mat-icon>\\r\\n              <span>Edit</span>\\r\\n            </button>\\r\\n            <button mat-menu-item (click)=\\\"openCommunityPopUp(row)\\\" [roleAuthorization]=\\\"'puc-u'\\\">\\r\\n              <mat-icon>assignment_ind</mat-icon>\\r\\n              <span>Community</span>\\r\\n            </button>\\r\\n            <button mat-menu-item (click)=\\\"openCategoryPopUp(row)\\\" [roleAuthorization]=\\\"'pucat-u'\\\">\\r\\n              <mat-icon>assistant</mat-icon>\\r\\n              <span>Category</span>\\r\\n            </button>\\r\\n            <button mat-menu-item (click)=\\\"removeUser(row)\\\" [roleAuthorization]=\\\"'pu-d'\\\">\\r\\n              <mat-icon>delete</mat-icon>Delete\\r\\n            </button>\\r\\n          </mat-menu>\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n    </ngx-datatable>\\r\\n\\r\\n  </mat-card-content>\\r\\n</mat-card> -->\\r\\n\\r\\n\\r\\n<mat-card class=\\\"p-10\\\" [@animate]=\\\"{value:'*',params:{y:'50px',delay:'300ms'}}\\\">\\r\\n  <mat-card-content class=\\\"p-0\\\">\\r\\n\\r\\n    <mat-form-field class=\\\"margin-333\\\" style=\\\"width: 99%\\\">\\r\\n      <input matInput placeholder=\\\"Search...\\\" value=\\\"\\\" (keyup)='updateFilter($event)'>\\r\\n    </mat-form-field>\\r\\n\\r\\n    <div class=\\\"m-333\\\">\\r\\n      <p class=\\\"mat-select-lable\\\"> Page Size: </p>\\r\\n      <mat-select class=\\\"mat-raised-select\\\" [(value)]=\\\"pageSize\\\" (selectionChange)=\\\"changeValue()\\\">\\r\\n        <mat-option [value]=\\\"10\\\">10</mat-option>\\r\\n        <mat-option [value]=\\\"20\\\">20</mat-option>\\r\\n      </mat-select>\\r\\n      <span fxFlex></span>\\r\\n      <button mat-raised-button class=\\\"mb-05\\\" (click)=\\\"openUserCreatePopup()\\\" color=\\\"accent\\\"\\r\\n        [roleAuthorization]=\\\"'pu-c'\\\">Add User</button>\\r\\n    </div>\\r\\n\\r\\n    <table class=\\\"table table-hover\\\">\\r\\n      <thead>\\r\\n        <tr>\\r\\n          <th class=\\\"pl-1\\\" width=\\\"80px\\\"></th>\\r\\n          <th class=\\\"pl-1\\\">Name</th>\\r\\n          <th>Email</th>\\r\\n          <th width=\\\"180px\\\">Role</th>\\r\\n          <th>Status</th>\\r\\n          <th width=\\\"150px\\\" class=\\\"\\\">Actions</th>\\r\\n        </tr>\\r\\n      </thead>\\r\\n      <tbody>\\r\\n        <tr *ngFor=\\\"let row of users;\\\">\\r\\n          <td class=\\\"pt-1 pb-1\\\">\\r\\n            <img mat-list-avatar class=\\\"\\\" src=\\\"assets/images/face-1.jpg\\\" alt=\\\"\\\"\\r\\n              style=\\\"flex-shrink: 0; width: 40px; height: 40px; border-radius: 50%; object-fit: cover;\\\">\\r\\n          </td>\\r\\n          <td class=\\\"pt-1 pb-1\\\">{{ row?.accountName }}</td>\\r\\n          <td class=\\\"pt-1 pb-1\\\">{{ row?.email }}</td>\\r\\n          <td class=\\\"pt-1 pb-1\\\">\\r\\n            <mat-chip mat-sm-chip color=\\\"primary\\\" [selected]=\\\"true\\\">{{row?.role.name}}</mat-chip>\\r\\n          </td>\\r\\n          <td class=\\\"pt-1 pb-1\\\">\\r\\n            <mat-chip mat-sm-chip color=\\\"{{statusArray[row?.status].style}}\\\" selected>{{statusArray[row?.status].display}}</mat-chip>\\r\\n          </td>\\r\\n          <td class=\\\"pt-1 pb-1\\\">\\r\\n\\r\\n            <button class=\\\"card-control\\\" mat-icon-button [matMenuTriggerFor]=\\\"menu\\\">\\r\\n              <mat-icon>more_vert</mat-icon>\\r\\n            </button>\\r\\n\\r\\n            <mat-menu #menu=\\\"matMenu\\\">\\r\\n              <button mat-menu-item (click)=\\\"openEditPopUp(row)\\\" [roleAuthorization]=\\\"'pu-u'\\\">\\r\\n                <mat-icon>edit</mat-icon>\\r\\n                <span>Edit</span>\\r\\n              </button>\\r\\n              <button mat-menu-item (click)=\\\"openCommunityPopUp(row)\\\" [roleAuthorization]=\\\"'puc-u'\\\">\\r\\n                <mat-icon>assignment_ind</mat-icon>\\r\\n                <span>Community</span>\\r\\n              </button>\\r\\n              <button mat-menu-item (click)=\\\"openCategoryPopUp(row)\\\" [roleAuthorization]=\\\"'pucat-u'\\\">\\r\\n                <mat-icon>assistant</mat-icon>\\r\\n                <span>Category</span>\\r\\n              </button>\\r\\n              <button mat-menu-item *ngIf=\\\"row?.status !== 'DELETED'\\\" (click)=\\\"removeUser(row)\\\" [roleAuthorization]=\\\"'pu-d'\\\">\\r\\n                <mat-icon>delete</mat-icon>Delete\\r\\n              </button>\\r\\n            </mat-menu>\\r\\n\\r\\n          </td>\\r\\n        </tr>\\r\\n      </tbody>\\r\\n      <tfoot>\\r\\n        <tr>\\r\\n          <td class=\\\"pt-1 pb-1 pl-1\\\">\\r\\n            <div class=\\\"pagination\\\">{{totalRecords}} Total</div>\\r\\n          </td>\\r\\n          <td colspan=\\\"7\\\">\\r\\n            <nav aria-label=\\\"Page navigation example\\\">\\r\\n              <ul class=\\\"pagination\\\" *ngIf=\\\"totalPages.length > 1\\\">\\r\\n                <li class=\\\"page-item\\\" [ngClass]=\\\"{'disabled':pageNumber <= 1}\\\">\\r\\n                  <a class=\\\"page-link\\\" (click)=\\\"this.getPageClient(pageNumber-1);\\\" aria-label=\\\"Previous\\\">\\r\\n                    <span aria-hidden=\\\"true\\\">&laquo;</span>\\r\\n                    <span class=\\\"sr-only\\\">Previous</span>\\r\\n                  </a>\\r\\n                </li>\\r\\n                <li class=\\\"page-item\\\" *ngFor=\\\"let page of totalPages\\\" [ngClass]=\\\"{'active':pageNumber === page}\\\">\\r\\n                  <a class=\\\"page-link\\\" (click)=\\\"this.getPageClient(page);\\\">\\r\\n                    {{page}}\\r\\n                  </a>\\r\\n                </li>\\r\\n                <li class=\\\"page-item\\\" [ngClass]=\\\"{'disabled':pageNumber >= totalPages.length}\\\">\\r\\n                  <a class=\\\"page-link\\\" (click)=\\\"this.getPageClient(pageNumber+1);\\\" aria-label=\\\"Next\\\">\\r\\n                    <span aria-hidden=\\\"true\\\">&raquo;</span>\\r\\n                    <span class=\\\"sr-only\\\">Next</span>\\r\\n                  </a>\\r\\n                </li>\\r\\n              </ul>\\r\\n            </nav>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </tfoot>\\r\\n    </table>\\r\\n\\r\\n  </mat-card-content>\\r\\n\\r\\n</mat-card>\"","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from \"../user.service\";\r\nimport { ClientService } from \"../../client/client.service\";\r\nimport { MatDialogRef, MatDialog, MatSnackBar } from \"@angular/material\";\r\nimport { AppLoaderService } from \"../../../shared/services/app-loader/app-loader.service\";\r\nimport { UserCreatePopupComponent } from \"../user-table/user-create-popup/user-create-popup.component\";\r\nimport { UserTablePopupComponent } from \"../user-table/user-table-popup/user-table-popup.component\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { egretAnimations } from \"../../../shared/animations/egret-animations\";\r\nimport { AppErrorService } from \"../../../shared/services/app-error/app-error.service\";\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { UserCreateReq, ClientData, RoleData, CommunityData, CategoryData, UserUpdateReq, UserCategoryUpdateReq, UserCommunityUpdateRequest } from 'app/model/ClientModel.model';\r\nimport { UserCategoryPopupComponent } from './user-category-popup/user-category-popup.component';\r\nimport { UserCommunityPopupComponent } from './user-community-popup/user-community-popup.component';\r\nimport { AuthenticationService } from 'app/views/sessions/authentication.service';\r\nimport { GlobalVariable } from 'app/shared/helpers/global-variable';\r\nimport { AppConfirmService } from 'app/shared/services/app-confirm/app-confirm.service';\r\n\r\n@Component({\r\n  selector: 'app-user-table',\r\n  templateUrl: './user-table.component.html',\r\n  animations: egretAnimations\r\n})\r\nexport class UserTableComponent implements OnInit {\r\n\r\n  public users: any[];\r\n  public roles: any[] = [];\r\n  public statusArray = new GlobalVariable().common.matChip.userStatus;\r\n  public clientId;\r\n  public name;\r\n  public url;\r\n\r\n  public clientCategory;\r\n\r\n  // pagination\r\n  public keyword = '';\r\n  public pageNumber = 1;\r\n  public pageSize = 10;\r\n  public totalPages = [];\r\n  public totalRecords = 0;\r\n\r\n  public getItemSub: Subscription;\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private snack: MatSnackBar,\r\n    private clientService: ClientService,\r\n    private loader: AppLoaderService,\r\n    private errDialog: AppErrorService,\r\n    private activeRoute: ActivatedRoute,\r\n    private authService: AuthenticationService,\r\n    private confirmService: AppConfirmService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    const currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n    if (currentUser) {\r\n      this.clientId = currentUser.userData.client.id;\r\n\r\n      this.getClient();\r\n      this.getPageUser(this.pageNumber);\r\n      this.getClientCategories();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.getItemSub) {\r\n      this.getItemSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n\r\n  getClient() {\r\n    this.getItemSub = this.clientService.getClient(this.clientId).subscribe(successResp => {\r\n      // this.users = successResp.content.users;\r\n      // this.users.forEach((item, index) => {\r\n      //   if (item.role.name === \"Super Administrator\") this.users.splice(index, 1);\r\n      // });\r\n      successResp.content.roles.forEach((item) => {\r\n        this.roles.push(item);\r\n      });\r\n    },\r\n      error => {\r\n        this.errDialog.showError(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  getPageUser(pageNumber) {\r\n\r\n    if (pageNumber === 1 || (0 < pageNumber && pageNumber <= this.totalPages.length)) {\r\n      this.pageNumber = pageNumber;\r\n\r\n      this.clientService\r\n        .getUsers(this.clientId, this.keyword, this.pageSize, this.pageNumber, false)\r\n        .subscribe(\r\n          successResp => {\r\n            this.users = successResp.content;\r\n            let totalPages = successResp.pagination.totalPages;\r\n            let totalPagesArray = [];\r\n\r\n            if (totalPages > 1) {\r\n              for (let i = 1; i <= totalPages; i++) {\r\n                totalPagesArray.push(i);\r\n              }\r\n            }\r\n            this.totalPages = totalPagesArray;\r\n            this.totalRecords = successResp.pagination.totalRecords;\r\n          },\r\n          error => {\r\n            this.loader.close();\r\n            console.log('------------------------------- UserTableComponent : error - ', error);\r\n            console.log('------------------------------- UserTableComponent : error.status - ', error.status);\r\n            this.errDialog.showError(error);\r\n          }\r\n        );\r\n    }\r\n  }\r\n\r\n\r\n  changeValue() {\r\n    this.pageNumber = 1;\r\n    this.getPageUser(this.pageNumber);\r\n  }\r\n\r\n  updateFilter(event) {\r\n    if (event.keyCode === 13) {\r\n      this.keyword = event.target.value.toLowerCase();\r\n      this.pageNumber = 1;\r\n      this.getPageUser(this.pageNumber);\r\n    }\r\n  }\r\n\r\n  getClientCategories() {\r\n    this.getItemSub = this.clientService.getClientCategories(this.clientId).subscribe(successResp => {\r\n      this.clientCategory = successResp.content;\r\n      console.log(this.clientCategory);\r\n    },\r\n      error => {\r\n        this.errDialog.showError(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  getClientAndUserCommunities(popup, user?) {\r\n    this.getItemSub = this.clientService.getClientCommunities(this.clientId).subscribe(successResp => {\r\n      let clientCommunity = successResp.content;\r\n\r\n      if (popup === 'UserCreatePopup') {\r\n        this.userCreatePopup(clientCommunity);\r\n      } else if (popup === 'CommunityPopUp') {\r\n\r\n        this.clientService.getUser(user.id).subscribe(successResp => {\r\n          let userCommunity = successResp.content.communities;\r\n          this.communityPopup(user.id, clientCommunity, userCommunity);\r\n        },\r\n          error => {\r\n            this.errDialog.showError(error);\r\n          }\r\n        );\r\n\r\n      }\r\n\r\n    },\r\n      error => {\r\n        this.errDialog.showError(error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  openUserCreatePopup() {\r\n    this.getClientAndUserCommunities(\"UserCreatePopup\");\r\n  }\r\n\r\n  userCreatePopup(clientCommunity) {\r\n    let dialogRef: MatDialogRef<any> = this.dialog.open(\r\n      UserCreatePopupComponent,\r\n      {\r\n        width: \"720px\",\r\n        disableClose: true,\r\n        data: { roles: this.roles, category: this.clientCategory, community: clientCommunity }\r\n      }\r\n    );\r\n\r\n    dialogRef.afterClosed().subscribe(res => {\r\n      console.log(res);\r\n\r\n      if (!res) {\r\n        // If user press cancel\r\n        return;\r\n      }\r\n\r\n      this.loader.open();\r\n      let role: RoleData = new RoleData(res[0].role);\r\n\r\n      let communities: CommunityData[] = [];\r\n      res[2].forEach(element => {\r\n        communities.push(new CommunityData(element.id));\r\n      });\r\n\r\n      let categories: CategoryData[] = [];\r\n      res[1].forEach(element => {\r\n        categories.push(new CategoryData(element.id));\r\n      });\r\n\r\n      const client: ClientData = new ClientData(this.clientId);\r\n\r\n      const req: UserCreateReq = new UserCreateReq(res[0].username, res[0].password, res[0].email, role, client, communities, categories);\r\n\r\n      this.clientService.addUser(req).subscribe(\r\n        response => {\r\n          this.getPageUser(this.pageNumber);\r\n          this.loader.close();\r\n          this.snack.open(\"New User added !\", \"OK\", { duration: 4000 });\r\n        },\r\n        error => {\r\n          this.errDialog.showError(error);\r\n        }\r\n      );\r\n\r\n    });\r\n  }\r\n\r\n  openEditPopUp(data: any = {}) {\r\n    let dialogRef: MatDialogRef<any> = this.dialog.open(\r\n      UserTablePopupComponent,\r\n      {\r\n        width: \"720px\",\r\n        disableClose: true,\r\n        data: { payload: data, roles: this.roles }\r\n      }\r\n    );\r\n\r\n    dialogRef.afterClosed().subscribe(res => {\r\n      if (!res) {\r\n        // If user press cancel\r\n        return;\r\n      }\r\n\r\n      let role: RoleData = new RoleData(res.role);\r\n      const req: UserUpdateReq = new UserUpdateReq(res.username, res.email, role, res.status);\r\n\r\n      this.loader.open();\r\n      this.clientService.updateUser(data.id, req).subscribe(\r\n        response => {\r\n          this.getPageUser(this.pageNumber);\r\n          this.loader.close();\r\n          this.snack.open(\"User Updated!\", \"OK\", { duration: 4000 });\r\n        },\r\n        error => {\r\n          this.loader.close();\r\n          this.errDialog.showError(error);\r\n        }\r\n      );\r\n\r\n    });\r\n  }\r\n\r\n\r\n  openCommunityPopUp(data: any = {}) {\r\n    this.getClientAndUserCommunities(\"CommunityPopUp\", data);\r\n  }\r\n\r\n\r\n  communityPopup(userId, clientCommunities, userCommunities) {\r\n    let dialogRef: MatDialogRef<any> = this.dialog.open(\r\n      UserCommunityPopupComponent,\r\n      {\r\n        width: \"720px\",\r\n        disableClose: true,\r\n        data: { community: clientCommunities, selectedCommunity: userCommunities }\r\n      }\r\n    );\r\n    dialogRef.afterClosed().subscribe(res => {\r\n      if (!res) {\r\n        // If user press cancel\r\n        return;\r\n      }\r\n      console.log(res);\r\n\r\n      let community: CommunityData[] = [];\r\n      res.forEach(element => {\r\n        community.push(new CommunityData(element.id));\r\n      });\r\n      const req: UserCommunityUpdateRequest = new UserCommunityUpdateRequest(community);\r\n\r\n      this.loader.open();\r\n      this.clientService.updateUserCommunity(userId, req).subscribe(\r\n        response => {\r\n          this.getPageUser(this.pageNumber);\r\n          this.loader.close();\r\n          this.snack.open(\"User Community Updated!\", \"OK\", { duration: 4000 });\r\n        },\r\n        error => {\r\n          this.loader.close();\r\n          this.errDialog.showError({\r\n            title: \"Error\",\r\n            status: error.status,\r\n            type: \"http_error\"\r\n          });\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n\r\n  openCategoryPopUp(data: any = {}) {\r\n\r\n    this.getItemSub = this.clientService.getUser(data.id).subscribe(successResp => {\r\n      console.log(successResp);\r\n      console.log(successResp.content.role.id);\r\n\r\n      let dialogRef: MatDialogRef<any> = this.dialog.open(\r\n        UserCategoryPopupComponent,\r\n        {\r\n          width: \"720px\",\r\n          disableClose: true,\r\n          data: { category: this.clientCategory, selectedCategory: successResp.content.categories }\r\n        }\r\n      );\r\n      dialogRef.afterClosed().subscribe(res => {\r\n        if (!res) {\r\n          // If user press cancel\r\n          return;\r\n        }\r\n\r\n        console.log(res);\r\n\r\n        let categories: CategoryData[] = [];\r\n        res.forEach(element => {\r\n          categories.push(new CategoryData(element.id));\r\n        });\r\n\r\n        const req: UserCategoryUpdateReq = new UserCategoryUpdateReq(categories);\r\n\r\n        this.loader.open();\r\n        this.clientService.updateUserCategories(data.id, req).subscribe(\r\n          response => {\r\n            this.loader.close();\r\n            this.snack.open(\"User Category Updated!\", \"OK\", { duration: 4000 });\r\n          },\r\n          error => {\r\n            this.loader.close();\r\n            this.errDialog.showError({\r\n              title: \"Error\",\r\n              status: error.status,\r\n              type: \"http_error\"\r\n            });\r\n          }\r\n        );\r\n      });\r\n    },\r\n      error => {\r\n        this.errDialog.showError(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  removeUser(data: any = {}) {\r\n\r\n    this.confirmService\r\n      .confirm({ message: `Do You Want to Delete ${data.userName}?` })\r\n      .subscribe(res => {\r\n        if (res) {\r\n          this.clientService.deleteUser(data.id).subscribe(\r\n            successResp => {\r\n              console.log(successResp.content);\r\n              this.getPageUser(this.pageNumber);\r\n              this.snack.open(\"User Deleted!\", \"OK\", {\r\n                duration: 4000\r\n              });\r\n            },\r\n            error => {\r\n              this.errDialog.showError(error);\r\n            }\r\n          );\r\n        }\r\n      });\r\n\r\n  }\r\n\r\n}\r\n","module.exports = \"<div fxLayout=\\\"row\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n  <div fxFlex=\\\"100\\\" fxFlex.gt-md=\\\"300px\\\" fxFlex.gt-sm=\\\"50\\\">\\r\\n    <mat-card class=\\\"profile-sidebar mb-1 pb-0\\\">\\r\\n      <div class=\\\"propic text-center\\\">\\r\\n        <img src=\\\"assets/images/ui_icons/users.png\\\" alt=\\\"\\\">\\r\\n      </div>\\r\\n      <div class=\\\"profile-title text-center mb-1\\\">\\r\\n        <div class=\\\"main-title\\\">{{this.name}}</div>\\r\\n        <div class=\\\"subtitle mb-05\\\">ClearPicture</div>\\r\\n        <div class=\\\"text-muted\\\"> Provides the tools you need to easily manage Users.</div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"profile-nav\\\">\\r\\n        <mat-nav-list>\\r\\n          <mat-list-item routerLink=\\\"user-table\\\" routerLinkActive=\\\"list-item-active\\\">\\r\\n            <mat-icon>person</mat-icon>\\r\\n            Users\\r\\n          </mat-list-item>\\r\\n          <mat-divider></mat-divider>\\r\\n          <mat-list-item routerLink=\\\"role-table\\\" routerLinkActive=\\\"list-item-active\\\">\\r\\n            <mat-icon>settings</mat-icon>\\r\\n            User Roles\\r\\n          </mat-list-item>\\r\\n          <mat-divider></mat-divider>\\r\\n        </mat-nav-list>\\r\\n      </div>\\r\\n    </mat-card>\\r\\n\\r\\n  </div>\\r\\n\\r\\n  <!-- Profile Views -->\\r\\n  <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-md=\\\"calc(100% - 300px)\\\">\\r\\n    <router-outlet></router-outlet>\\r\\n  </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { egretAnimations } from '../../shared/animations/egret-animations';\r\nimport { ActivatedRoute, NavigationExtras, Router } from \"@angular/router\";\r\nimport { AuthenticationService } from '../sessions/authentication.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-user',\r\n  templateUrl: './user.component.html',\r\n  animations: egretAnimations\r\n})\r\nexport class UserComponent implements OnInit {\r\n\r\n  public clientId;\r\n  public name;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private activeRoute: ActivatedRoute,\r\n    private authService: AuthenticationService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    // if(JSON.parse(localStorage.getItem('currentUser'))){\r\n    //   const user = JSON.parse(localStorage.getItem('currentUser'));\r\n    //   console.log(user);\r\n    //   // this.id = user.client.id;\r\n    //   // this.name = user.client.name;\r\n    //   // this.url = client.clientLogo;\r\n    // }\r\n    \r\n    const currentUser = this.authService.getLoggedUserDetail();\r\n    this.clientId = currentUser.userData.client.id;\r\n    this.name = currentUser.userData.client.name;\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatInputModule,\r\n  MatIconModule,\r\n  MatCardModule,\r\n  MatMenuModule,\r\n  MatButtonModule,\r\n  MatChipsModule,\r\n  MatListModule,\r\n  MatTooltipModule,\r\n  MatDialogModule,\r\n  MatSnackBarModule,\r\n  MatSlideToggleModule,\r\n  MatToolbarModule,\r\n  MatSelectModule,\r\n  MatAutocompleteModule,\r\n  MatStepperModule,\r\n  MatTabsModule,\r\n  MatCheckboxModule\r\n} from '@angular/material';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\nimport { SharedModule } from '../../shared/shared.module';\r\n// import { UserTableComponent } from './users/user-table.component';\r\nimport { UserComponent } from './user.component';\r\nimport { UserTableComponent } from './user-table/user-table.component';\r\nimport { UserCreatePopupComponent } from './user-table/user-create-popup/user-create-popup.component';\r\nimport { UserCategoryPopupComponent } from './user-table/user-category-popup/user-category-popup.component';\r\nimport { UserCommunityPopupComponent } from './user-table/user-community-popup/user-community-popup.component';\r\nimport { RoleTableComponent } from './roles/role-table.component';\r\nimport { RoleTablePopupComponent } from './roles/role-table-popup/role-table-popup.component';\r\nimport { ClientService } from \"../client/client.service\";\r\n\r\nimport { UserRoutes } from './user.routing';\r\nimport { UserService } from './user.service';\r\nimport { UserTablePopupComponent } from './user-table/user-table-popup/user-table-popup.component'\r\nimport { NgxIntlTelInputModule } from 'ngx-intl-tel-input';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule,\r\n    NgxDatatableModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatButtonModule,\r\n    MatChipsModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    MatDialogModule,\r\n    MatSnackBarModule,\r\n    MatSlideToggleModule,\r\n    SharedModule,\r\n    MatToolbarModule,\r\n    MatSelectModule,\r\n    RouterModule.forChild(UserRoutes),\r\n    MatSlideToggleModule,\r\n    MatMenuModule,\r\n    MatAutocompleteModule,\r\n    NgxIntlTelInputModule,\r\n    MatStepperModule,\r\n    MatToolbarModule,\r\n    MatTabsModule,\r\n    MatCheckboxModule,\r\n  ],\r\n  declarations: [\r\n    UserComponent,\r\n    UserTableComponent, \r\n    UserTablePopupComponent, \r\n    UserCreatePopupComponent, \r\n    UserCommunityPopupComponent, \r\n    UserCategoryPopupComponent, \r\n    RoleTableComponent, \r\n    RoleTablePopupComponent\r\n  ],\r\n  providers: [UserService, ClientService],\r\n  entryComponents: [\r\n    UserTablePopupComponent,\r\n    UserCreatePopupComponent,\r\n    UserCommunityPopupComponent, \r\n    UserCategoryPopupComponent,\r\n    RoleTablePopupComponent\r\n  ]\r\n})\r\nexport class UserModule { }\r\n","import { Routes } from '@angular/router';\r\nimport { UserTableComponent } from './user-table/user-table.component';\r\nimport { RoleTableComponent } from './roles/role-table.component';\r\nimport { UserComponent } from './user.component';\r\n\r\nexport const UserRoutes: Routes = [\r\n  {\r\n    path: \"\",\r\n    component: UserComponent,\r\n    data: { title: \"User\", breadcrumb: \"User\" },\r\n    children: [\r\n      {\r\n        path: \"user-table\",\r\n        component: UserTableComponent,\r\n        data: { title: \"Users\", breadcrumb: \"Users\" }\r\n      },\r\n      {\r\n        path: \"role-table\",\r\n        component: RoleTableComponent,\r\n        data: { title: \"Roles\", breadcrumb: \"Roles\" }\r\n      }\r\n    ]\r\n  }\r\n];"],"sourceRoot":""}