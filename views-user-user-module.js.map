{"version":3,"sources":["webpack:///./src/app/views/user/roles/role-table-popup/role-table-popup.component.html","webpack:///./src/app/views/user/roles/role-table-popup/role-table-popup.component.ts","webpack:///./src/app/views/user/roles/role-table.component.html","webpack:///./src/app/views/user/roles/role-table.component.ts","webpack:///./src/app/views/user/user-table/user-category-popup/user-category-popup.component.html","webpack:///./src/app/views/user/user-table/user-category-popup/user-category-popup.component.ts","webpack:///./src/app/views/user/user-table/user-community-popup/user-community-popup.component.html","webpack:///./src/app/views/user/user-table/user-community-popup/user-community-popup.component.ts","webpack:///./src/app/views/user/user-table/user-create-popup/user-create-popup.component.html","webpack:///./src/app/views/user/user-table/user-create-popup/user-create-popup.component.ts","webpack:///./src/app/views/user/user-table/user-table-popup/user-table-popup.component.html","webpack:///./src/app/views/user/user-table/user-table-popup/user-table-popup.component.ts","webpack:///./src/app/views/user/user-table/user-table.component.html","webpack:///./src/app/views/user/user-table/user-table.component.ts","webpack:///./src/app/views/user/user.component.html","webpack:///./src/app/views/user/user.component.ts","webpack:///./src/app/views/user/user.module.ts","webpack:///./src/app/views/user/user.routing.ts"],"names":[],"mappings":"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","file":"views-user-user-module.js","sourcesContent":["module.exports = \"<mat-toolbar matDialogTitle class=\\\"mat-primary m-0\\\">\\r\\n  <div fxFlex fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <span class=\\\"title dialog-title\\\">{{data.title}}</span>\\r\\n  </div>\\r\\n</mat-toolbar>\\r\\n<mat-dialog-content class=\\\"mat-typography mt-1\\\" style=\\\"overflow: unset; max-height: unset;\\\">\\r\\n  <form [formGroup]=\\\"roleFormGroup\\\">\\r\\n    <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <input matInput required formControlName=\\\"name\\\" placeholder=\\\"Role Name\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <input matInput required formControlName=\\\"description\\\" placeholder=\\\"Description\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n    </div>\\r\\n  </form>\\r\\n\\r\\n  <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n    <div fxFlex=\\\"100\\\" class=\\\"pr-1\\\">\\r\\n      <span>Select Role Authorities</span>\\r\\n    </div>\\r\\n    <div fxFlex=\\\"100\\\" class=\\\"pr-1\\\">\\r\\n      <mat-tab-group>\\r\\n        <div *ngFor=\\\"let module of this.componentList; let i = index\\\">\\r\\n          <mat-tab label=\\\"{{module.moduleName}}\\\">\\r\\n            <form [formGroup]=\\\"authoritiesFormGroup\\\">\\r\\n              <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" style=\\\"padding-top: 5px;\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n                <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\" style=\\\"padding-top: 5px;\\\" *ngFor=\\\"let item of module.data\\\">\\r\\n                  <mat-checkbox [checked]=\\\"item.checked\\\" (change)=\\\"onChange(item.id, module.moduleName, item.code, $event.checked)\\\" class=\\\"full-width\\\" value=\\\"{{item.code}}\\\">{{item.name}}</mat-checkbox>\\r\\n                </div>\\r\\n              </div>\\r\\n            </form>\\r\\n          </mat-tab>\\r\\n        </div>\\r\\n      </mat-tab-group>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions align=\\\"end\\\">\\r\\n  <button mat-raised-button color=\\\"accent\\\" [disabled]=\\\"this.selectedAuthorities.length == 0 || roleFormGroup.invalid\\\" (click)=\\\"submit()\\\">Save</button>\\r\\n  <span fxFlex></span>\\r\\n  <button mat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"dialogRef.close(false)\\\">Cancel</button>\\r\\n</mat-dialog-actions>\\r\\n\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { FormBuilder, Validators, FormGroup, FormArray, FormControl } from '@angular/forms';\r\nimport { UserService } from '../../user.service';\r\nimport { ClientService } from '../../../client/client.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-role-table-popup',\r\n  templateUrl: './role-table-popup.component.html'\r\n})\r\nexport class RoleTablePopupComponent implements OnInit {\r\n  public authoritiesFormGroup: FormGroup;\r\n  public roleFormGroup: FormGroup;\r\n  //Raveen : need to implement a custom directive for the pattern validation\r\n  //public codeRegex = '/^-?[0-9]+(\\.[0-9]*){0,1}$/g';\r\n  public componentList = [];\r\n  public numberOfComponent = this.componentList.length - 1;\r\n  public selectedAuthorities: Array<any> = [];\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public dialogRef: MatDialogRef<RoleTablePopupComponent>,\r\n    private fb: FormBuilder,\r\n    // private userService: UserService,\r\n    private clientService: ClientService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.buildRoleForms(this.data.payload);\r\n    this.buildauthoritiesForm();\r\n    this.getAllAuthorities();\r\n  }\r\n\r\n  /*\r\n  * Build New Role Form Group\r\n  * Created by Prasad Kumara\r\n  * 14/02/2019\r\n  */\r\n  buildRoleForms(item) {\r\n    this.roleFormGroup = this.fb.group({\r\n      name: [item.name || '', Validators.required],\r\n      description: [item.description || '', Validators.required]\r\n    });\r\n  }\r\n\r\n  /*\r\n  * Create New User Role Authorities Form Group\r\n  * Created by Prasad Kumara\r\n  * 14/02/2019\r\n  */\r\n  buildauthoritiesForm() {\r\n    this.authoritiesFormGroup = this.fb.group({\r\n      data: this.fb.array([])\r\n    });\r\n  }\r\n\r\n  /*\r\n  * Form Data Submit\r\n  * Created by Prasad Kumara\r\n  * 14/02/2019\r\n  */\r\n  submit() {\r\n    const roleFormValue = this.roleFormGroup.value;\r\n    const roleData = {\r\n      name: roleFormValue.name,\r\n      description: roleFormValue.description,\r\n      authorities: this.selectedAuthorities\r\n    };\r\n    this.dialogRef.close(roleData);\r\n  }\r\n\r\n  /*\r\n  * Check box onchange function for get selected check box value\r\n  * Created by Prasad Kumara\r\n  * 14/02/2019\r\n  */\r\n  onChange(id: String, name: String, auth_key: String, isChecked: boolean) {\r\n    const dataArray = <FormArray>this.authoritiesFormGroup.controls.data;\r\n    console.log('--------- role update onchange -------------');\r\n    if (isChecked) {\r\n      dataArray.push(new FormControl(auth_key));\r\n      const tempJson = {\r\n        id: id\r\n      };\r\n      console.log(id, auth_key);\r\n      this.selectedAuthorities.push(tempJson);\r\n    } else {\r\n      const index = dataArray.controls.findIndex(x => x.value === auth_key);\r\n      dataArray.removeAt(index);\r\n      // for (let i = 0; i < this.selectedAuthorities.length; i++) {\r\n      //   if (this.selectedAuthorities[i].id === id) {\r\n          const i = this.selectedAuthorities.findIndex(y => y.id === id);\r\n          console.log(id, auth_key, i);\r\n          this.selectedAuthorities.splice(i, 1);\r\n          // break;\r\n      //   }\r\n      // }\r\n    }\r\n  }\r\n\r\n  /*\r\n  * Set Selected role authorities when update popup window open\r\n  * Created by Prasad Kumara\r\n  * 14/02/2019\r\n  */\r\n  setSelectedRoleAuthorities() {\r\n    if (this.data.payload.hasOwnProperty('authorities')) {\r\n      const temList = this.componentList;\r\n      temList.forEach(element => {\r\n        element.data.forEach(data => {\r\n          if (data.checked) {\r\n            const tempJson = {\r\n              id: data.id\r\n            };\r\n            this.selectedAuthorities.push(tempJson);\r\n          }\r\n        });\r\n      });\r\n      console.log('-------------- setSelectedRoleAuthorities -------------------');\r\n      console.log(this.selectedAuthorities);\r\n    }\r\n  }\r\n\r\n  /*\r\n  * Get All Authorities\r\n  * Created by Prasad Kumara\r\n  * 14/02/2019\r\n  */\r\n  getAllAuthorities() {\r\n    this.clientService.getAllAuthorities()\r\n      .subscribe(\r\n        response => {\r\n          console.log(response);\r\n          \r\n          this.createComponentArray(response.content);\r\n        }\r\n      );\r\n  }\r\n\r\n  /*\r\n  * Create Componet tab view data array\r\n  * Created by Prasad Kumara\r\n  * 14/02/2019\r\n  */\r\n  createComponentArray(dataArray: any) {\r\n    dataArray.forEach(data => {\r\n      const name = this.getModuleName(data.code);\r\n      if (name === 'Clients') {\r\n        const i = this.componentList.findIndex(x => x.moduleName === name);\r\n        const status =  this.setSelectedAuthorities(data.id);\r\n        if (i < 0) {\r\n          const tempdata = data;\r\n          tempdata['checked'] = status;\r\n          this.componentList.push({\r\n            moduleName: name,\r\n            data: [tempdata]\r\n          });\r\n        }else {\r\n          const tempdata = data;\r\n          tempdata['checked'] = status;\r\n          this.componentList[i].data.push(tempdata);\r\n        }\r\n      }\r\n    });\r\n    // console.log('--------------- component list --------------------');\r\n    // console.log(this.componentList);\r\n    this.setSelectedRoleAuthorities();\r\n  }\r\n\r\n  /*\r\n  * Get module name according to the code\r\n  * Created by Prasad Kumara\r\n  * 14/02/2019\r\n  */\r\n  getModuleName(code): any {\r\n    const x = code.split('-');\r\n    if (x[0] === 'pc' || x[0] === 'pur' || x[0] === 'pu') {\r\n      return 'Clients';\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /*\r\n  * Set Selected Authorities checke function\r\n  * Created by Prasad Kumara\r\n  * 14/02/2019\r\n  */\r\n  setSelectedAuthorities(id): boolean {\r\n    let status = false;\r\n    if (this.data.payload.hasOwnProperty('authorities')) {\r\n      const dataArray = this.data.payload.authorities;\r\n      dataArray.forEach(elements => {\r\n        if (elements.id === id) {\r\n          status = true;\r\n        }\r\n      });\r\n    }\r\n    return status;\r\n  }\r\n\r\n}\r\n","module.exports = \"<mat-card class=\\\"p-0\\\" [@animate]=\\\"{value:'*',params:{y:'50px',delay:'300ms'}}\\\">\\r\\n  <mat-card-title>\\r\\n    <div class=\\\"card-title-text\\\">Roles</div>\\r\\n    <mat-divider></mat-divider>\\r\\n\\r\\n    <div class=\\\"m-333\\\">\\r\\n      <button mat-raised-button class=\\\"mb-05 ml-05\\\" color=\\\"primary\\\" (click)=\\\"openPopUp({}, true)\\\">Add Role</button>\\r\\n      <span fxFlex></span>\\r\\n      <p class=\\\"mat-select-lable\\\"> Page Size: </p>\\r\\n      <mat-select class=\\\"mat-raised-select\\\" [(value)]=\\\"pageSize\\\" (selectionChange)=\\\"changeValue()\\\">\\r\\n        <mat-option [value]=\\\"10\\\">10</mat-option>\\r\\n        <mat-option [value]=\\\"20\\\">20</mat-option>\\r\\n      </mat-select>\\r\\n    </div>\\r\\n\\r\\n  </mat-card-title>\\r\\n  <mat-card-content class=\\\"p-0\\\">\\r\\n\\r\\n    <ngx-datatable class=\\\"material ml-0 mr-0\\\" [rows]=\\\"roles\\\" [columnMode]=\\\"'flex'\\\" [headerHeight]=\\\"50\\\"\\r\\n      [footerHeight]=\\\"50\\\" [limit]=\\\"10\\\" [rowHeight]=\\\"'auto'\\\">\\r\\n      <ngx-datatable-column name=\\\"Role Name\\\" [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          {{ row?.name }}\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n\\r\\n      <!-- <ngx-datatable-column name=\\\"Role Description\\\" [flexGrow]=\\\"2\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          {{ row?.description }}\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n\\r\\n      <ngx-datatable-column name=\\\"Last Modified Date\\\" [flexGrow]=\\\"2\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          {{ row?.lastModifiedDate }}\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column> -->\\r\\n\\r\\n      <ngx-datatable-column name=\\\"Actions\\\" [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          <!-- <button mat-icon-button mat-sm-button color=\\\"primary\\\" class=\\\"mr-1\\\" (click)=\\\"editRole(row)\\\">\\r\\n            <mat-icon>edit</mat-icon>\\r\\n          </button>\\r\\n          <button mat-icon-button mat-sm-button color=\\\"warn\\\" (click)=\\\"deleteRole(row)\\\">\\r\\n            <mat-icon>delete</mat-icon>\\r\\n          </button> -->\\r\\n          <span fxFlex></span>\\r\\n          <button class=\\\"card-control\\\" mat-icon-button [matMenuTriggerFor]=\\\"menu\\\">\\r\\n            <mat-icon>more_vert</mat-icon>\\r\\n          </button>\\r\\n          <mat-menu #menu=\\\"matMenu\\\">\\r\\n            <button mat-menu-item (click)=\\\"editRole(row)\\\"><mat-icon>edit</mat-icon>Edit</button>\\r\\n            <button mat-menu-item (click)=\\\"deleteRole(row)\\\"><mat-icon>delete</mat-icon>Delete</button>\\r\\n          </mat-menu>\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n\\r\\n    </ngx-datatable>\\r\\n\\r\\n\\r\\n    <!-- <table class=\\\"table table-hover\\\">\\r\\n      <thead>\\r\\n        <tr>\\r\\n          <th class=\\\"pl-1\\\">Feedback Topic</th>\\r\\n          <th>Feedback Type</th>\\r\\n          <th>Start Date</th>\\r\\n          <th>End Date</th>\\r\\n          <th width=\\\"150px\\\" class=\\\"\\\">Actions</th>\\r\\n        </tr>\\r\\n      </thead>\\r\\n      <tbody>\\r\\n        <tr *ngFor=\\\"let row of rows;\\\">\\r\\n          <td class=\\\"pt-1 pb-1 pl-1\\\">{{row?.topic}}</td>\\r\\n          <td class=\\\"pt-1 pb-1\\\">{{row?.type =='P' ? 'Product' : 'E Vote'}}</td>\\r\\n          <td class=\\\"pt-1 pb-1\\\">{{row?.startDate}}</td>\\r\\n          <td class=\\\"pt-1 pb-1\\\">{{row?.endDate}}</td>\\r\\n          <td class=\\\"pt-1 pb-1 pr-1\\\">\\r\\n            <div class=\\\"pb-1\\\">\\r\\n              <div class=\\\"col-lg-4 col-sm-4 col-xs-4\\\">\\r\\n                <button mat-icon-button mat-sm-button (click)='navigateSurveyBuilder(row)' color=\\\"primary\\\" class=\\\"\\\">\\r\\n                  <mat-icon>view_headline</mat-icon>\\r\\n                </button>\\r\\n              </div>\\r\\n              <div class=\\\"col-lg-4 col-sm-4 col-xs-4\\\">\\r\\n                <button mat-icon-button mat-sm-button (click)='openSurveyPopup(row,false)' color=\\\"primary\\\" class=\\\"\\\">\\r\\n                  <mat-icon>edit</mat-icon>\\r\\n                </button>\\r\\n              </div>\\r\\n              <div class=\\\"col-lg-4 col-sm-4 col-xs-4\\\">\\r\\n                <button mat-icon-button mat-sm-button (click)=\\\"deleteSurvey(row)\\\" color=\\\"warn\\\" class=\\\"\\\">\\r\\n                  <mat-icon>delete</mat-icon>\\r\\n                </button>\\r\\n              </div>\\r\\n            </div>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </tbody>\\r\\n      <tfoot>\\r\\n        <tr>\\r\\n          <td class=\\\"pt-1 pb-1 pl-1\\\">\\r\\n            <div class=\\\"pagination\\\">{{totalRecords}} Total</div>\\r\\n          </td>\\r\\n          <td colspan=\\\"4\\\">\\r\\n\\r\\n            <nav aria-label=\\\"Page navigation example\\\">\\r\\n              <ul class=\\\"pagination\\\" *ngIf=\\\"totalPages.length > 1\\\">\\r\\n                <li class=\\\"page-item\\\" [ngClass]=\\\"{'disabled':pageNumber <= 1}\\\">\\r\\n                  <a class=\\\"page-link\\\" (click)=\\\"this.getPageSurvey(pageNumber-1);\\\" aria-label=\\\"Previous\\\">\\r\\n                    <span aria-hidden=\\\"true\\\">&laquo;</span>\\r\\n                    <span class=\\\"sr-only\\\">Previous</span>\\r\\n                  </a>\\r\\n                </li>\\r\\n                <li class=\\\"page-item\\\" *ngFor=\\\"let page of totalPages\\\" [ngClass]=\\\"{'active':pageNumber === page}\\\">\\r\\n                  <a class=\\\"page-link\\\" (click)=\\\"this.getPageSurvey(page);\\\">\\r\\n                    {{page}}\\r\\n                  </a>\\r\\n                </li>\\r\\n                <li class=\\\"page-item\\\" [ngClass]=\\\"{'disabled':pageNumber >= totalPages.length}\\\">\\r\\n                  <a class=\\\"page-link\\\" (click)=\\\"this.getPageSurvey(pageNumber+1);\\\" aria-label=\\\"Next\\\">\\r\\n                    <span aria-hidden=\\\"true\\\">&raquo;</span>\\r\\n                    <span class=\\\"sr-only\\\">Next</span>\\r\\n                  </a>\\r\\n                </li>\\r\\n              </ul>\\r\\n            </nav>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </tfoot>\\r\\n    </table> -->\\r\\n\\r\\n  </mat-card-content>\\r\\n</mat-card>\\r\\n\"","import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { UserService } from \"../user.service\";\r\nimport { ClientService } from \"../../client/client.service\";\r\nimport { MatDialogRef, MatDialog, MatSnackBar } from \"@angular/material\";\r\nimport { AppConfirmService } from \"../../../shared/services/app-confirm/app-confirm.service\";\r\nimport { AppLoaderService } from \"../../../shared/services/app-loader/app-loader.service\";\r\nimport { RoleTablePopupComponent } from \"./role-table-popup/role-table-popup.component\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { egretAnimations } from \"../../../shared/animations/egret-animations\";\r\nimport { AppErrorService } from \"../../../shared/services/app-error/app-error.service\";\r\nimport { NavigationExtras, Router } from \"@angular/router\";\r\nimport { AuthenticationService } from \"app/views/sessions/authentication.service\";\r\n\r\n@Component({\r\n  selector: \"app-role-table\",\r\n  templateUrl: \"./role-table.component.html\",\r\n  animations: egretAnimations\r\n})\r\nexport class RoleTableComponent implements OnInit, OnDestroy {\r\n  public roles: any[];\r\n  public pageSize = 10;\r\n\r\n  public componentList = [];\r\n  public editRoleId: String;\r\n  public clientId;\r\n\r\n  public getItemSub: Subscription;\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private snack: MatSnackBar,\r\n    private clientService: ClientService,\r\n    private confirmService: AppConfirmService,\r\n    private loader: AppLoaderService,\r\n    private errDialog: AppErrorService,\r\n    private authService: AuthenticationService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n    const currentUser = this.authService.getLoggedUserDetail();\r\n    if (currentUser) {\r\n      this.clientId = currentUser.userData.client.id;\r\n      this.getClientRoles();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.getItemSub) {\r\n      this.getItemSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n\r\n  getClientRoles() {\r\n    this.getItemSub = this.clientService.getClient(this.clientId).subscribe(successResp => {\r\n      this.roles = successResp.content.roles;\r\n    },\r\n      error => {\r\n        this.errDialog.showError(error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  // getItems() {\r\n  //   this.getItemSub = this.clientService.getAllUserRoles().subscribe(\r\n  //     response => {\r\n  //       this.items = response.content;\r\n  //     },\r\n  //     error => {\r\n  //       this.errDialog.showError(error);\r\n  //     }\r\n  //   );\r\n  // }\r\n\r\n  /*\r\n  * Open Create and Update Role popup window\r\n  * Created by Prasad Kumara\r\n  * 14/02/2019\r\n  */\r\n\r\n  openPopUp(data: any = {}, isNew?) {\r\n    let title = isNew ? \"Create New User Role\" : \"Update User Role\";\r\n    data[\"isNew\"] = isNew;\r\n    let dialogRef: MatDialogRef<any> = this.dialog.open(\r\n      RoleTablePopupComponent,\r\n      {\r\n        width: \"900px\",\r\n        disableClose: true,\r\n        data: { title: title, payload: data, clientID: this.clientId }\r\n      }\r\n    );\r\n    dialogRef.afterClosed().subscribe(res => {\r\n      if (!res) {\r\n        // If user press cancel\r\n        return;\r\n      }\r\n      this.loader.open();\r\n      if (isNew) {\r\n        // console.log('------------ create user role object ---------------');\r\n        console.log(res);\r\n        this.clientService.createNewRole(res).subscribe(response => {\r\n          // console.log('--------------- create user role response ----------------');\r\n          // console.log(response);\r\n          this.snack.open('User Role Created', 'close', {\r\n            duration: 2000\r\n          });\r\n          this.getClientRoles();\r\n        },\r\n          error => {\r\n            this.errDialog.showError(error);\r\n          });\r\n      } else {\r\n        // console.log('------------ update user role object ---------------');\r\n        res[\"localizedName\"] = \"\";\r\n        // console.log(res);\r\n        this.clientService.updateRloe(this.editRoleId, res).subscribe(\r\n          response => {\r\n            // console.log('--------------- create user role response ----------------');\r\n            // console.log(response);\r\n            this.snack.open(\"User Role Updated\", \"close\", {\r\n              duration: 2000\r\n            });\r\n            this.getClientRoles();\r\n          },\r\n          error => {\r\n            this.errDialog.showError(error);\r\n          });\r\n      }\r\n      this.loader.close();\r\n    });\r\n  }\r\n\r\n  /*\r\n   * Edit User Role\r\n   * Created by Prasad Kumara\r\n   * 14/02/2019\r\n   */\r\n  editRole(role) {\r\n    // console.log('------------- edit role ----------------');\r\n    // console.log(role);\r\n    this.editRoleId = role.id;\r\n    this.clientService.getOneRoleAuthorities(role.id).subscribe(\r\n      response => {\r\n        // console.log(response.content);\r\n        const roleData = {\r\n          name: response.content.name,\r\n          description: response.content.description,\r\n          authorities: response.content.authorities\r\n        };\r\n        this.openPopUp(roleData, false);\r\n      },\r\n      error => {\r\n        this.errDialog.showError(error);\r\n      });\r\n  }\r\n\r\n  /*\r\n   * Delete User Role\r\n   * Created by Prasad Kumara\r\n   * 14/02/2019\r\n   */\r\n  deleteRole(row) {\r\n    this.confirmService\r\n      .confirm({ message: `Delete ${row.name}?` })\r\n      .subscribe(res => {\r\n        if (res) {\r\n          // this.loader.open();\r\n          this.getClientRoles();\r\n        }\r\n      });\r\n  }\r\n}\r\n","module.exports = \"<mat-toolbar matDialogTitle class=\\\"mat-primary m-0\\\">\\r\\n  <div fxFlex fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <span class=\\\"title dialog-title\\\">Category</span>\\r\\n  </div>\\r\\n</mat-toolbar>\\r\\n<mat-dialog-content class=\\\"mat-typography mt-1\\\">\\r\\n\\r\\n  <mat-form-field class=\\\"matAutocomplete-chip-list\\\">\\r\\n\\r\\n    <mat-chip-list #chipList>\\r\\n      <mat-chip *ngFor=\\\"let category of selectedCategories\\\" [selectable]=\\\"selectable\\\" [removable]=\\\"removable\\\"\\r\\n        (removed)=\\\"remove(category)\\\">\\r\\n        {{category.name}}\\r\\n        <mat-icon matChipRemove *ngIf=\\\"removable\\\">cancel</mat-icon>\\r\\n      </mat-chip>\\r\\n      <input matInput placeholder=\\\"Select category...\\\" #categoryInput [formControl]=\\\"categoryCtrl\\\"\\r\\n        [matAutocomplete]=\\\"auto\\\" [matChipInputFor]=\\\"chipList\\\" [matChipInputSeparatorKeyCodes]=\\\"separatorKeysCodes\\\"\\r\\n        (matChipInputTokenEnd)=\\\"add($event)\\\" [matChipInputAddOnBlur]=\\\"addOnBlur\\\"\\r\\n        aria-label=\\\"Category\\\">\\r\\n    </mat-chip-list>\\r\\n\\r\\n    <mat-autocomplete #auto=\\\"matAutocomplete\\\" (optionSelected)=\\\"selected($event)\\\">\\r\\n      <mat-option *ngFor=\\\"let category of filteredCategories | async\\\" [value]=\\\"category.id\\\">\\r\\n        <span>{{category.name}}</span>\\r\\n      </mat-option>\\r\\n    </mat-autocomplete>\\r\\n\\r\\n  </mat-form-field>\\r\\n\\r\\n  <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"mt-1\\\">\\r\\n    <div fxFlex=\\\"100\\\" class=\\\"mt-1\\\">\\r\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"submit()\\\">Save</button>\\r\\n      <span fxFlex></span>\\r\\n      <button mat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"dialogRef.close(false)\\\">Cancel</button>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n</mat-dialog-content>\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { FormBuilder, Validators, FormGroup, FormControl } from '@angular/forms';\r\n\r\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\r\nimport { ElementRef, ViewChild } from '@angular/core';\r\nimport { MatAutocompleteSelectedEvent, MatChipInputEvent, MatAutocomplete } from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { autoCompletableCategory } from 'app/model/ClientModel.model';\r\n\r\n\r\n@Component({\r\n  selector: 'app-user-category-popup',\r\n  templateUrl: './user-category-popup.component.html'\r\n})\r\nexport class UserCategoryPopupComponent implements OnInit {\r\n  selectable = true;\r\n  removable = true;\r\n  addOnBlur = true;\r\n  separatorKeysCodes: number[] = [ENTER, COMMA];\r\n  categoryCtrl = new FormControl();\r\n  allCategories: autoCompletableCategory[] = [];\r\n  filteredCategories: Observable<autoCompletableCategory[]>;\r\n  selectedCategories: autoCompletableCategory[] = [];\r\n\r\n  @ViewChild('categoryInput') categoryInput: ElementRef<HTMLInputElement>;\r\n  @ViewChild('auto') matAutocomplete: MatAutocomplete;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public dialogRef: MatDialogRef<UserCategoryPopupComponent>,\r\n    private fb: FormBuilder,\r\n  ) {\r\n    this.filteredCategories = this.categoryCtrl.valueChanges\r\n      .pipe(\r\n        startWith(null),\r\n        map(category => category ? this._filterCategories(category) : this.allCategories.slice())\r\n      );\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    this.allCategories = JSON.parse(JSON.stringify(this.data.category));\r\n    this.selectedCategories = [];\r\n    if (this.data.selectedCategory.length > 0) {\r\n      this.data.selectedCategory.forEach(element => {\r\n        this.addSelectedCategory(element.id)\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  submit() {\r\n    this.dialogRef.close(this.selectedCategories);\r\n  }\r\n\r\n  add(event: MatChipInputEvent): void {\r\n\r\n    if (!this.matAutocomplete.isOpen) {\r\n      const input = event.input;\r\n      const value = event.value;\r\n\r\n      // if we need to add custom texts as Chips,\r\n      // Add our category\r\n      // if ((value || '').trim()) {\r\n      //   this.categories.push(value.trim());\r\n      // }\r\n\r\n      // Reset the input value\r\n      if (input) {\r\n        input.value = '';\r\n      }\r\n\r\n      this.categoryCtrl.setValue(null);\r\n    }\r\n  }\r\n\r\n  selected(event: MatAutocompleteSelectedEvent): void {\r\n    this.addSelectedCategory(event.option.value);\r\n    this.categoryInput.nativeElement.value = '';\r\n    this.categoryCtrl.setValue(null);\r\n  }\r\n\r\n  addSelectedCategory(id) {\r\n    this.allCategories.forEach((item, index) => {\r\n      if (item.id === id) {\r\n        this.selectedCategories.push(item);\r\n        this.allCategories.splice(index, 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  remove(category: autoCompletableCategory): void {\r\n    this.selectedCategories.forEach((item, index) => {\r\n      if (item.id === category.id) {\r\n        this.allCategories.push(category);\r\n        this.selectedCategories.splice(index, 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  private _filterCategories(value: string): autoCompletableCategory[] {\r\n    const filterValue = value.toLowerCase();\r\n    return this.allCategories.filter(category => category.name.toLowerCase().indexOf(filterValue) === 0);\r\n  }\r\n\r\n}\r\n","module.exports = \"<mat-toolbar matDialogTitle class=\\\"mat-primary m-0\\\">\\r\\n  <div fxFlex fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <span class=\\\"title dialog-title\\\">Community</span>\\r\\n  </div>\\r\\n</mat-toolbar>\\r\\n<mat-dialog-content class=\\\"mat-typography mt-1\\\" style=\\\"overflow: unset; max-height: unset;\\\">\\r\\n\\r\\n  <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"mt-3\\\" *ngIf=\\\"allCommunities.length !== 0\\\">\\r\\n    <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\" *ngFor=\\\"let community of allCommunities\\\">\\r\\n      <mat-checkbox [checked]=\\\"community.isChecked\\\" (change)=\\\"onChange($event)\\\" class=\\\"full-width\\\"\\r\\n        [value]=\\\"community.id\\\">\\r\\n        {{community.name}}</mat-checkbox>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"alert alert-warning\\\" role=\\\"alert\\\" *ngIf=\\\"allCommunities.length === 0\\\">\\r\\n    Client has no any assigned communities.!\\r\\n  </div>\\r\\n\\r\\n  <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"mt-2\\\">\\r\\n    <div fxFlex=\\\"100\\\" class=\\\"mt-1\\\">\\r\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"submit()\\\" *ngIf=\\\"allCommunities.length !== 0\\\">Save</button>\\r\\n      <span fxFlex></span>\\r\\n      <button mat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"dialogRef.close(false)\\\">Cancel</button>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n</mat-dialog-content>\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatCheckboxChange } from '@angular/material';\r\nimport { FormBuilder, Validators, FormGroup, FormControl } from '@angular/forms';\r\n\r\n\r\n@Component({\r\n  selector: 'app-user-community-popup',\r\n  templateUrl: './user-community-popup.component.html'\r\n})\r\nexport class UserCommunityPopupComponent implements OnInit {\r\n\r\n\r\n  allCommunities = [];\r\n  selectedCommunities = [];\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public dialogRef: MatDialogRef<UserCommunityPopupComponent>,\r\n    private fb: FormBuilder,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n    this.allCommunities = JSON.parse(JSON.stringify(this.data.community));\r\n    console.log(this.allCommunities);\r\n    \r\n    \r\n    // this.selectedCommunities = [];\r\n    this.selectedCommunities = this.data.selectedCommunity;\r\n\r\n    this.allCommunities.forEach(element => {\r\n      if (this.selectedCommunities.length > 0) {\r\n        if (this.selectedCommunities.filter(community => community.id.indexOf(element.id) === 0)) {\r\n          element['isChecked'] = true;\r\n        } else {\r\n          element['isChecked'] = false;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  onChange(event: MatCheckboxChange): void {\r\n    if (event.checked) {\r\n      this.allCommunities.forEach((item) => {\r\n        if (item.id === event.source.value) {\r\n          this.selectedCommunities.push(item);\r\n        }\r\n      });\r\n    } else {\r\n      this.selectedCommunities.forEach((item, index) => {\r\n        if (item.id === event.source.value) {\r\n          this.selectedCommunities.splice(index, 1);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  submit() {\r\n    this.dialogRef.close(this.selectedCommunities);\r\n  }\r\n}","module.exports = \"<mat-toolbar matDialogTitle class=\\\"mat-primary m-0\\\">\\r\\n  <div fxFlex fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\r\\n    <span class=\\\"title dialog-title\\\">Create Client</span>\\r\\n  </div>\\r\\n</mat-toolbar>\\r\\n<mat-dialog-content class=\\\"mat-typography mt-1\\\" id=\\\"client-create\\\">\\r\\n\\r\\n\\r\\n  <mat-horizontal-stepper [linear]=\\\"true\\\">\\r\\n\\r\\n    <mat-step [stepControl]=\\\"userFormGroup\\\">\\r\\n\\r\\n      <form [formGroup]=\\\"userFormGroup\\\">\\r\\n\\r\\n        <ng-template matStepLabel>Client</ng-template>\\r\\n\\r\\n\\r\\n        <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"mt-1\\\">\\r\\n\\r\\n          <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <input matInput name=\\\"username\\\" [formControl]=\\\"userFormGroup.controls['username']\\\" placeholder=\\\"User Name\\\">\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <input matInput name=\\\"password\\\" type=\\\"password\\\" [formControl]=\\\"userFormGroup.controls['password']\\\"\\r\\n                positiveNumberAndLetterOnly placeholder=\\\"Password\\\">\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <input matInput name=\\\"email\\\" [formControl]=\\\"userFormGroup.controls['email']\\\" placeholder=\\\"Email\\\">\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n          <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <mat-select [formControl]=\\\"userFormGroup.controls['role']\\\" placeholder=\\\"Select A User Role\\\">\\r\\n                <mat-option>none</mat-option>\\r\\n                <mat-option *ngFor=\\\"let roles of roles\\\" [value]=\\\"roles.id\\\">{{roles.name}}</mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"mt-1\\\">\\r\\n          <div fxFlex=\\\"100\\\" class=\\\"mt-1\\\">\\r\\n            <button mat-raised-button color=\\\"primary\\\" matStepperNext>Next</button>\\r\\n            <span fxFlex></span>\\r\\n            <button mat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"dialogRef.close(false)\\\">Cancel</button>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n      </form>\\r\\n\\r\\n    </mat-step>\\r\\n\\r\\n\\r\\n    <mat-step [stepControl]=\\\"categoryFormGroup\\\">\\r\\n      <form [formGroup]=\\\"categoryFormGroup\\\">\\r\\n        <ng-template matStepLabel>Category</ng-template>\\r\\n\\r\\n        <mat-form-field class=\\\"matAutocomplete-chip-list\\\">\\r\\n          <mat-chip-list #chipList>\\r\\n            <mat-chip *ngFor=\\\"let category of categories\\\" [selectable]=\\\"selectable\\\" [removable]=\\\"removable\\\"\\r\\n              (removed)=\\\"remove(category)\\\">\\r\\n              {{category}}\\r\\n              <mat-icon matChipRemove *ngIf=\\\"removable\\\">cancel</mat-icon>\\r\\n            </mat-chip>\\r\\n            <input placeholder=\\\"Select category...\\\" #categoryInput [formControl]=\\\"categoryFormGroup.controls['category']\\\" [matAutocomplete]=\\\"auto\\\"\\r\\n              [matChipInputFor]=\\\"chipList\\\" [matChipInputSeparatorKeyCodes]=\\\"separatorKeysCodes\\\" (matChipInputTokenEnd)=\\\"add($event)\\\"\\r\\n              [matChipInputAddOnBlur]=\\\"addOnBlur\\\">\\r\\n          </mat-chip-list>\\r\\n          <mat-autocomplete #auto=\\\"matAutocomplete\\\" (optionSelected)=\\\"selected($event)\\\">\\r\\n            <mat-option *ngFor=\\\"let category of filteredCategories | async; let i = index\\\" [value]=\\\"categoriesObj[i].id\\\">\\r\\n              {{category}}\\r\\n            </mat-option>\\r\\n          </mat-autocomplete>\\r\\n        </mat-form-field>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"mt-1\\\">\\r\\n          <div fxFlex=\\\"100\\\" class=\\\"mt-1\\\">\\r\\n            <button mat-raised-button color=\\\"accent\\\" matStepperPrevious class=\\\"mr-1\\\">Back</button>\\r\\n            <button mat-raised-button color=\\\"primary\\\" matStepperNext>Next</button>\\r\\n            <span fxFlex></span>\\r\\n            <button mat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"dialogRef.close(false)\\\">Cancel</button>\\r\\n          </div>\\r\\n        </div>\\r\\n      </form>\\r\\n    </mat-step>\\r\\n\\r\\n    <mat-step [stepControl]=\\\"communityFormGroup\\\">\\r\\n      <form [formGroup]=\\\"communityFormGroup\\\">\\r\\n        <ng-template matStepLabel>Community</ng-template>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"mt-1\\\">\\r\\n\\r\\n          <div fxFlex=\\\"100\\\" class=\\\"pr-1\\\">\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <input matInput name=\\\"username\\\" positiveNumberAndLetterOnly placeholder=\\\"Username\\\"\\r\\n                [formControl]=\\\"communityFormGroup.controls['username']\\\">\\r\\n            </mat-form-field>\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n\\r\\n        <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"mt-1\\\">\\r\\n          <div fxFlex=\\\"100\\\" class=\\\"mt-1\\\">\\r\\n            <button mat-raised-button color=\\\"accent\\\" matStepperPrevious class=\\\"mr-1\\\">Back</button>\\r\\n            <button mat-raised-button color=\\\"primary\\\" (click)=\\\"submit()\\\">Submit</button>\\r\\n            <span fxFlex></span>\\r\\n            <button mat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"dialogRef.close(false)\\\">Cancel</button>\\r\\n          </div>\\r\\n        </div>\\r\\n        \\r\\n      </form>\\r\\n    </mat-step>\\r\\n\\r\\n  </mat-horizontal-stepper>\\r\\n\\r\\n\\r\\n</mat-dialog-content>\"","import { Component, OnInit, Inject, ViewChild, ElementRef } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatSnackBar, MatAutocomplete, MatAutocompleteSelectedEvent, MatChipInputEvent } from '@angular/material';\r\nimport { FormBuilder, Validators, FormGroup, FormControl } from '@angular/forms';\r\nimport { egretAnimations } from \"../../../../shared/animations/egret-animations\";\r\nimport { GlobalVariable } from \"../../../../shared/helpers/global-variable\";\r\nimport { Observable } from 'rxjs';\r\nimport { startWith, map } from 'rxjs/operators';\r\nimport { ENTER, COMMA } from '@angular/cdk/keycodes';\r\n\r\n\r\n@Component({\r\n  selector: 'app-user-create-popup',\r\n  templateUrl: './user-create-popup.component.html',\r\n  animations: egretAnimations,\r\n})\r\nexport class UserCreatePopupComponent implements OnInit {\r\n\r\n  public globalVariable: GlobalVariable = new GlobalVariable();\r\n  public license = this.globalVariable.client.license;\r\n  public regex = this.globalVariable.validators.regex;\r\n\r\n  public userFormGroup: FormGroup;\r\n  public categoryFormGroup: FormGroup;\r\n  public communityFormGroup: FormGroup;\r\n  public licenseFormGroup: FormGroup;\r\n  // public formStatus = false;\r\n\r\n  public roles;\r\n\r\n\r\n  visible = true;\r\n  selectable = true;\r\n  removable = true;\r\n  addOnBlur = true;\r\n  separatorKeysCodes: number[] = [ENTER, COMMA];\r\n  categoryCtrl = new FormControl();\r\n  filteredCategories: Observable<string[]>;\r\n  categories: string[] = [];\r\n  categoriesValue: string[] = [];\r\n  allCategories: string[] = [];\r\n  public categoriesObj;\r\n\r\n  @ViewChild('categoryInput') categoryInput: ElementRef<HTMLInputElement>;\r\n  @ViewChild('auto') matAutocomplete: MatAutocomplete;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public dialogRef: MatDialogRef<UserCreatePopupComponent>,\r\n    private fb: FormBuilder,\r\n    public snackBar: MatSnackBar\r\n  ) {\r\n    this.filteredCategories = this.categoryCtrl.valueChanges.pipe(\r\n      startWith(null),\r\n      map((category: string | null) => category ? this._filter(category) : this.allCategories.slice()));\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.roles = this.data.roles;\r\n    this.categoriesObj = this.data.category;\r\n    this.categoriesObj.forEach(element => {\r\n      this.allCategories.push(element.name);\r\n    });\r\n    this.buildItemForm()\r\n  }\r\n\r\n  buildItemForm() {\r\n\r\n    // this.userFormGroup = this.fb.group({\r\n    //   username: new FormControl(''),\r\n    //   password: new FormControl(''),\r\n    //   email: new FormControl(''),\r\n    //   role: new FormControl('')\r\n    // });\r\n    \r\n    this.userFormGroup = this.fb.group({\r\n      username: new FormControl('', Validators.required),\r\n      password: new FormControl('', Validators.required),\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      role: new FormControl('', Validators.required)\r\n    });\r\n    this.categoryFormGroup = this.fb.group({\r\n      category: this.categoryCtrl\r\n    });\r\n    this.communityFormGroup = this.fb.group({\r\n      username: [''],\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    let forms = [this.userFormGroup.value, this.categories, this.communityFormGroup.value];\r\n    this.dialogRef.close(forms);\r\n  }\r\n\r\n  add(event: MatChipInputEvent): void {\r\n\r\n    if (!this.matAutocomplete.isOpen) {\r\n      const input = event.input;\r\n      const value = event.value;\r\n\r\n      // if we need to add custom texts as Chips,\r\n      // Add our category\r\n      // if ((value || '').trim()) {\r\n      //   this.categories.push(value.trim());\r\n      // }\r\n\r\n      // Reset the input value\r\n      if (input) {\r\n        input.value = '';\r\n      }\r\n\r\n      this.categoryCtrl.setValue(null);\r\n    }\r\n  }\r\n\r\n  remove(category: string): void {\r\n    const index = this.categories.indexOf(category);\r\n\r\n    if (index >= 0) {\r\n      this.categories.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  selected(event: MatAutocompleteSelectedEvent): void {\r\n    this.categories.push(event.option.viewValue);\r\n    this.categoryInput.nativeElement.value = '';\r\n    this.categoryCtrl.setValue(null);\r\n  }\r\n\r\n  private _filter(value: string): string[] {\r\n    const filterValue = value.toLowerCase();\r\n\r\n    return this.allCategories.filter(category => category.toLowerCase().indexOf(filterValue) === 0);\r\n  }\r\n\r\n}\r\n\r\n","module.exports = \"<form [formGroup]=\\\"itemForm\\\" (ngSubmit)=\\\"submit()\\\">\\r\\n  <mat-toolbar matDialogTitle class=\\\"mat-primary m-0\\\">\\r\\n    <div fxFlex fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\">\\r\\n      <span class=\\\"title dialog-title\\\">{{data.title}}</span>\\r\\n    </div>\\r\\n  </mat-toolbar>\\r\\n  <mat-dialog-content class=\\\"mat-typography mt-1\\\">\\r\\n    <div fxLayout=\\\"row\\\" fxLayout.lt-sm=\\\"column\\\" fxLayoutWrap=\\\"wrap\\\" class=\\\"mt-1\\\">\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <input matInput name=\\\"username\\\" [formControl]=\\\"itemForm.controls['username']\\\" placeholder=\\\"User Name\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\" *ngIf=\\\"formStatus\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <input matInput name=\\\"password\\\" type=\\\"password\\\" [formControl]=\\\"itemForm.controls['password']\\\"\\r\\n            positiveNumberAndLetterOnly placeholder=\\\"Password\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <input matInput name=\\\"email\\\" [formControl]=\\\"itemForm.controls['email']\\\" placeholder=\\\"Email\\\">\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n      <div fxFlex=\\\"50\\\" class=\\\"pr-1\\\">\\r\\n        <mat-form-field class=\\\"full-width\\\">\\r\\n          <mat-select [formControl]=\\\"itemForm.controls['role']\\\" placeholder=\\\"Select A User Role\\\">\\r\\n            <mat-option>none</mat-option>\\r\\n            <mat-option *ngFor=\\\"let roles of roles\\\" [value]=\\\"roles.id\\\">{{roles.name}}</mat-option>\\r\\n          </mat-select>\\r\\n        </mat-form-field>\\r\\n      </div>\\r\\n      <!-- <div fxFlex=\\\"50\\\" class=\\\"pt-1 pr-1\\\">\\r\\n        <mat-slide-toggle [formControl]=\\\"itemForm.controls['isActive']\\\">Active User</mat-slide-toggle>\\r\\n      </div> -->\\r\\n      <div fxFlex=\\\"100\\\" class=\\\"mt-1\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"itemForm.invalid\\\">Save</button>\\r\\n        <span fxFlex></span>\\r\\n        <button mat-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"dialogRef.close(false)\\\">Cancel</button>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n  </mat-dialog-content>\\r\\n</form>\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { FormBuilder, Validators, FormGroup, FormControl } from '@angular/forms';\r\n\r\n\r\n@Component({\r\n  selector: 'app-user-table-popup',\r\n  templateUrl: './user-table-popup.component.html'\r\n})\r\nexport class UserTablePopupComponent implements OnInit {\r\n  public itemForm: FormGroup;\r\n  public roles: any[];\r\n  public formStatus = false;\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    public dialogRef: MatDialogRef<UserTablePopupComponent>,\r\n    private fb: FormBuilder,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.buildItemForm(this.data.payload);\r\n    console.log(this.data);\r\n    \r\n    this.roles = this.data.roles;\r\n\r\n  }\r\n\r\n  buildItemForm(item) {\r\n    let role = null;\r\n    let userStatus = 0;\r\n    if (item.id === undefined) {\r\n      this.formStatus = true;\r\n    } else {\r\n      role = item.role.id;\r\n      if(item.status===\"ACTIVE\"){\r\n        userStatus = 1;\r\n      }\r\n    }\r\n\r\n\r\n    this.itemForm = this.fb.group({\r\n      username: new FormControl(item.userName || '', Validators.required),\r\n      password: new FormControl(item.password || '', Validators.required),\r\n      email: new FormControl(item.email || '', [Validators.required, Validators.email]),\r\n      role: new FormControl(role, Validators.required),\r\n      // isActive: new FormControl(userStatus)\r\n    })\r\n\r\n    if (item.id !== undefined) {\r\n      // role = item.role.id;\r\n      this.itemForm.get('password').clearValidators();\r\n      this.itemForm.get('password').updateValueAndValidity();\r\n    }\r\n  }\r\n\r\n  submit() {\r\n    this.dialogRef.close(this.itemForm.value)\r\n  }\r\n}\r\n","module.exports = \"<mat-card class=\\\"p-0\\\" [@animate]=\\\"{value:'*',params:{y:'50px',delay:'300ms'}}\\\">\\r\\n  <mat-card-title>\\r\\n\\r\\n    <div class=\\\"m-333 mt-3\\\">\\r\\n      <button mat-raised-button class=\\\"mb-05 ml-05\\\" color=\\\"primary\\\" (click)=\\\"userCreatePopup()\\\">Add User</button>\\r\\n      <span fxFlex></span>\\r\\n      <p class=\\\"mat-select-lable\\\"> Page Size: </p>\\r\\n      <mat-select class=\\\"mat-raised-select\\\" [(value)]=\\\"pageSize\\\" (selectionChange)=\\\"changeValue()\\\">\\r\\n        <mat-option [value]=\\\"10\\\">10</mat-option>\\r\\n        <mat-option [value]=\\\"20\\\">20</mat-option>\\r\\n      </mat-select>\\r\\n    </div>\\r\\n\\r\\n\\r\\n  </mat-card-title>\\r\\n  <mat-card-content class=\\\"p-0\\\">\\r\\n\\r\\n    <ngx-datatable class=\\\"material ml-0 mr-0\\\" [rows]=\\\"users\\\" [columnMode]=\\\"'force'\\\" [headerHeight]=\\\"50\\\"\\r\\n      [footerHeight]=\\\"50\\\" [limit]=\\\"10\\\" [rowHeight]=\\\"'auto'\\\">\\r\\n\\r\\n      <ngx-datatable-column name=\\\"\\\" [flexGrow]=\\\"1\\\" [maxWidth]=\\\"80\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          <img mat-list-avatar class=\\\"\\\" src=\\\"assets/images/face-1.jpg\\\" alt=\\\"\\\"\\r\\n            style=\\\"flex-shrink: 0; width: 40px; height: 40px; border-radius: 50%; object-fit: cover;\\\">\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n\\r\\n      <ngx-datatable-column name=\\\"Name\\\" [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          {{ row?.userName }}\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n\\r\\n      <ngx-datatable-column name=\\\"Email\\\" [flexGrow]=\\\"1\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          {{ row?.email }}\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n\\r\\n      <ngx-datatable-column name=\\\"Role\\\" [flexGrow]=\\\"1\\\"  [maxWidth]=\\\"150\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          <mat-chip mat-sm-chip color=\\\"warn\\\" [selected]=\\\"true\\\">{{row?.role.name}}</mat-chip>\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n\\r\\n      <ngx-datatable-column name=\\\"Status\\\" [flexGrow]=\\\"1\\\" [maxWidth]=\\\"150\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          <mat-chip mat-sm-chip color=\\\"{{statusArray[row?.status]}}\\\" [selected]=\\\"true\\\">{{row?.status}}</mat-chip>\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n\\r\\n\\r\\n      <ngx-datatable-column name=\\\"Actions\\\" [flexGrow]=\\\"1\\\" [maxWidth]=\\\"80\\\">\\r\\n        <ng-template let-row=\\\"row\\\" ngx-datatable-cell-template>\\r\\n          <button class=\\\"card-control\\\" mat-icon-button [matMenuTriggerFor]=\\\"menu1\\\">\\r\\n            <mat-icon>more_vert</mat-icon>\\r\\n          </button>\\r\\n          <mat-menu #menu1=\\\"matMenu\\\">\\r\\n            <button mat-menu-item (click)=\\\"openEditPopUp(row)\\\">\\r\\n              <mat-icon>edit</mat-icon>\\r\\n              <span>Edit</span>\\r\\n            </button>\\r\\n            <button mat-menu-item (click)=\\\"openCommunityPopUp(row)\\\">\\r\\n              <mat-icon>assignment_ind</mat-icon>\\r\\n              <span>Community</span>\\r\\n            </button>\\r\\n            <button mat-menu-item (click)=\\\"openCategoryPopUp(row)\\\">\\r\\n              <mat-icon>assistant</mat-icon>\\r\\n              <span>Category</span>\\r\\n            </button>\\r\\n          </mat-menu>\\r\\n        </ng-template>\\r\\n      </ngx-datatable-column>\\r\\n    </ngx-datatable>\\r\\n\\r\\n  </mat-card-content>\\r\\n</mat-card>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from \"../user.service\";\r\nimport { ClientService } from \"../../client/client.service\";\r\nimport { MatDialogRef, MatDialog, MatSnackBar } from \"@angular/material\";\r\nimport { AppLoaderService } from \"../../../shared/services/app-loader/app-loader.service\";\r\nimport { UserCreatePopupComponent } from \"../user-table/user-create-popup/user-create-popup.component\";\r\nimport { UserTablePopupComponent } from \"../user-table/user-table-popup/user-table-popup.component\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { egretAnimations } from \"../../../shared/animations/egret-animations\";\r\nimport { AppErrorService } from \"../../../shared/services/app-error/app-error.service\";\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { UserCreateReq, ClientData, RoleData, CommunityData, CategoryData, UserUpdateReq, UserCategoryUpdateReq, UserCommunityUpdateRequest } from 'app/model/ClientModel.model';\r\nimport { UserCategoryPopupComponent } from './user-category-popup/user-category-popup.component';\r\nimport { UserCommunityPopupComponent } from './user-community-popup/user-community-popup.component';\r\nimport { AuthenticationService } from 'app/views/sessions/authentication.service';\r\n\r\n@Component({\r\n  selector: 'app-user-table',\r\n  templateUrl: './user-table.component.html',\r\n  animations: egretAnimations\r\n})\r\nexport class UserTableComponent implements OnInit {\r\n\r\n  public users: any[];\r\n  public roles: any[];\r\n  public statusArray = {\r\n    'Active': \"primary\",\r\n    'Inactive': \"accent\"\r\n  };\r\n  public pageSize = 10;\r\n  public clientId;\r\n  public name;\r\n  public url;\r\n\r\n  public clientCategory;\r\n  public clientCommunity;\r\n\r\n  public getItemSub: Subscription;\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private snack: MatSnackBar,\r\n    // private userService: UserService,\r\n    private clientService: ClientService,\r\n    private loader: AppLoaderService,\r\n    private errDialog: AppErrorService,\r\n    private activeRoute: ActivatedRoute,\r\n    private authService: AuthenticationService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n\r\n    // const client = JSON.parse(localStorage.getItem('currentUser')).userData.client;\r\n    // console.log(client);\r\n    // this.clientId = client.id;\r\n    // this.name = client.name;\r\n\r\n    const currentUser = this.authService.getLoggedUserDetail();\r\n    this.clientId = currentUser.userData.client.id;\r\n    this.name = currentUser.userData.client.name;\r\n\r\n    this.getUsers();\r\n    this.getUserRoles();\r\n    this.getClientCategories();\r\n    this.getClientCommunities();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.getItemSub) {\r\n      this.getItemSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  getUsers() {\r\n    this.getItemSub = this.clientService.getUsers(this.clientId).subscribe(successResp => {\r\n      this.users = successResp.content.users;\r\n\r\n      this.users.forEach((item, index) => {\r\n        if (item.role.name === \"Admin\") this.users.splice(index, 1);\r\n      });\r\n\r\n      this.users.forEach((item, index) => {\r\n        if (item.role.name === \"Super Administrator\") this.users.splice(index, 1);\r\n      });\r\n\r\n      // this.roles = successResp.content;\r\n\r\n      console.log(this.users);\r\n    },\r\n      error => {\r\n        this.errDialog.showError(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  getUserRoles() {\r\n    this.getItemSub = this.clientService.getRoles().subscribe(successResp => {\r\n      successResp.content.forEach((item, index) => {\r\n        if (item.name === \"Super Administrator\") { successResp.content.splice(index, 1) };\r\n      });\r\n      successResp.content.forEach((item, index) => {\r\n        if (item.name === \"Admin\") { successResp.content.splice(index, 1) };\r\n      });\r\n      this.roles = successResp.content;\r\n    },\r\n      error => {\r\n        this.errDialog.showError(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  getClientCategories() {\r\n    this.getItemSub = this.clientService.getClientCategories(this.clientId).subscribe(successResp => {\r\n      this.clientCategory = successResp.content;\r\n      console.log(this.clientCategory);\r\n\r\n    },\r\n      error => {\r\n        this.errDialog.showError({\r\n          title: \"Error\",\r\n          status: error.status,\r\n          type: \"http_error\"\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  getClientCommunities() {\r\n    this.getItemSub = this.clientService.getClientCommunities(this.clientId).subscribe(successResp => {\r\n      this.clientCommunity = successResp.content;\r\n      console.log(this.clientCommunity);\r\n    },\r\n      error => {\r\n        this.errDialog.showError(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  userCreatePopup() {\r\n    let dialogRef: MatDialogRef<any> = this.dialog.open(\r\n      UserCreatePopupComponent,\r\n      {\r\n        width: \"720px\",\r\n        disableClose: true,\r\n        data: { roles: this.roles, category: this.clientCategory }\r\n      }\r\n    );\r\n\r\n    dialogRef.afterClosed().subscribe(res => {\r\n      console.log(res);\r\n\r\n      if (!res) {\r\n        // If user press cancel\r\n        return;\r\n      }\r\n\r\n      this.loader.open();\r\n      let role: RoleData = new RoleData(res[0].role);\r\n\r\n      let communities: CommunityData[] = [];\r\n      // communities.push(new CommunityData(res[0].role));\r\n\r\n      let categories: CategoryData[] = [];\r\n      res[1].forEach(element => {\r\n        categories.push(new CategoryData(element));\r\n      });\r\n\r\n      const client: ClientData = new ClientData(this.clientId);\r\n\r\n      const req: UserCreateReq = new UserCreateReq(res[0].username, res[0].password, res[0].email, role, client, communities, categories);\r\n\r\n      this.clientService.addUser(req).subscribe(\r\n        response => {\r\n          this.getUsers();\r\n          this.users = response;\r\n          this.loader.close();\r\n          this.snack.open(\"New User added !\", \"OK\", { duration: 4000 });\r\n        },\r\n        error => {\r\n          this.loader.close();\r\n          this.errDialog.showError(error);\r\n        }\r\n      );\r\n\r\n    });\r\n  }\r\n\r\n  openEditPopUp(data: any = {}) {\r\n    let dialogRef: MatDialogRef<any> = this.dialog.open(\r\n      UserTablePopupComponent,\r\n      {\r\n        width: \"720px\",\r\n        disableClose: true,\r\n        data: { payload: data, roles: this.roles }\r\n      }\r\n    );\r\n\r\n    dialogRef.afterClosed().subscribe(res => {\r\n      if (!res) {\r\n        // If user press cancel\r\n        return;\r\n      }\r\n\r\n      let role: RoleData = new RoleData(res.role);\r\n      const req: UserUpdateReq = new UserUpdateReq(res.username, res.email, role);\r\n\r\n      this.loader.open();\r\n      this.clientService.updateUser(data.id, req).subscribe(\r\n        response => {\r\n          this.getUsers();\r\n          this.loader.close();\r\n          this.snack.open(\"User Updated!\", \"OK\", { duration: 4000 });\r\n        },\r\n        error => {\r\n          this.loader.close();\r\n          this.errDialog.showError({\r\n            title: \"Error\",\r\n            status: error.status,\r\n            type: \"http_error\"\r\n          });\r\n        }\r\n      );\r\n\r\n    });\r\n  }\r\n\r\n\r\n  openCommunityPopUp(data: any = {}) {\r\n    console.log();\r\n    \r\n\r\n    this.getItemSub = this.clientService.getUser(data.id).subscribe(successResp => {\r\n\r\n      console.log(successResp);\r\n\r\n\r\n      let dialogRef: MatDialogRef<any> = this.dialog.open(\r\n        UserCommunityPopupComponent,\r\n        {\r\n          width: \"720px\",\r\n          disableClose: true,\r\n          data: { community: this.clientCommunity, selectedCommunity: successResp.content.communities }\r\n        }\r\n      );\r\n      dialogRef.afterClosed().subscribe(res => {\r\n        if (!res) {\r\n          // If user press cancel\r\n          return;\r\n        }\r\n        console.log(res);\r\n\r\n        let community: CommunityData[] = [];\r\n        res.forEach(element => {\r\n          community.push(new CommunityData(element.id));\r\n        });\r\n        const req: UserCommunityUpdateRequest = new UserCommunityUpdateRequest(community);\r\n\r\n        this.loader.open();\r\n        this.clientService.updateUserCommunity(data.id, req).subscribe(\r\n          response => {\r\n            this.getUsers();\r\n            this.loader.close();\r\n            this.snack.open(\"User Community Updated!\", \"OK\", { duration: 4000 });\r\n          },\r\n          error => {\r\n            this.loader.close();\r\n            this.errDialog.showError({\r\n              title: \"Error\",\r\n              status: error.status,\r\n              type: \"http_error\"\r\n            });\r\n          }\r\n        );\r\n      });\r\n    },\r\n      error => {\r\n        this.errDialog.showError(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  openCategoryPopUp(data: any = {}) {\r\n\r\n    this.getItemSub = this.clientService.getUser(data.id).subscribe(successResp => {\r\n      console.log(successResp);\r\n      console.log(successResp.content.role.id);\r\n\r\n      let dialogRef: MatDialogRef<any> = this.dialog.open(\r\n        UserCategoryPopupComponent,\r\n        {\r\n          width: \"720px\",\r\n          disableClose: true,\r\n          data: { category: this.clientCategory, selectedCategory: successResp.content.categories }\r\n        }\r\n      );\r\n      dialogRef.afterClosed().subscribe(res => {\r\n        if (!res) {\r\n          // If user press cancel\r\n          return;\r\n        }\r\n\r\n        console.log(res);\r\n\r\n        let categories: CategoryData[] = [];\r\n        res.forEach(element => {\r\n          categories.push(new CategoryData(element.id));\r\n        });\r\n\r\n        const req: UserCategoryUpdateReq = new UserCategoryUpdateReq(categories);\r\n\r\n        this.loader.open();\r\n        this.clientService.updateUserCategories(data.id, req).subscribe(\r\n          response => {\r\n            this.loader.close();\r\n            this.snack.open(\"User Category Updated!\", \"OK\", { duration: 4000 });\r\n          },\r\n          error => {\r\n            this.loader.close();\r\n            this.errDialog.showError({\r\n              title: \"Error\",\r\n              status: error.status,\r\n              type: \"http_error\"\r\n            });\r\n          }\r\n        );\r\n      });\r\n    },\r\n      error => {\r\n        this.errDialog.showError(error);\r\n      }\r\n    );\r\n  }\r\n}\r\n","module.exports = \"<div fxLayout=\\\"row\\\" fxLayoutWrap=\\\"wrap\\\">\\r\\n  <div fxFlex=\\\"100\\\" fxFlex.gt-md=\\\"300px\\\" fxFlex.gt-sm=\\\"50\\\">\\r\\n    <mat-card class=\\\"profile-sidebar mb-1 pb-0\\\">\\r\\n      <div class=\\\"propic text-center\\\">\\r\\n        <img src=\\\"assets/images/ui_icons/users.png\\\" alt=\\\"\\\">\\r\\n      </div>\\r\\n      <div class=\\\"profile-title text-center mb-1\\\">\\r\\n        <div class=\\\"main-title\\\">{{this.name}}</div>\\r\\n        <div class=\\\"subtitle mb-05\\\">ClearPicture</div>\\r\\n        <div class=\\\"text-muted\\\"> Provides the tools you need to easily manage Users.</div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"profile-nav\\\">\\r\\n        <mat-nav-list>\\r\\n          <mat-list-item routerLink=\\\"user-table\\\" routerLinkActive=\\\"list-item-active\\\">\\r\\n            <mat-icon>person</mat-icon>\\r\\n            Users\\r\\n          </mat-list-item>\\r\\n          <mat-divider></mat-divider>\\r\\n          <mat-list-item routerLink=\\\"role-table\\\" routerLinkActive=\\\"list-item-active\\\">\\r\\n            <mat-icon>settings</mat-icon>\\r\\n            User Roles\\r\\n          </mat-list-item>\\r\\n          <mat-divider></mat-divider>\\r\\n        </mat-nav-list>\\r\\n      </div>\\r\\n    </mat-card>\\r\\n\\r\\n  </div>\\r\\n\\r\\n  <!-- Profile Views -->\\r\\n  <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-md=\\\"calc(100% - 300px)\\\">\\r\\n    <router-outlet></router-outlet>\\r\\n  </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { egretAnimations } from '../../shared/animations/egret-animations';\r\nimport { ActivatedRoute, NavigationExtras, Router } from \"@angular/router\";\r\nimport { AuthenticationService } from '../sessions/authentication.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-user',\r\n  templateUrl: './user.component.html',\r\n  animations: egretAnimations\r\n})\r\nexport class UserComponent implements OnInit {\r\n\r\n  public clientId;\r\n  public name;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private activeRoute: ActivatedRoute,\r\n    private authService: AuthenticationService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    // if(JSON.parse(localStorage.getItem('currentUser'))){\r\n    //   const user = JSON.parse(localStorage.getItem('currentUser'));\r\n    //   console.log(user);\r\n    //   // this.id = user.client.id;\r\n    //   // this.name = user.client.name;\r\n    //   // this.url = client.clientLogo;\r\n    // }\r\n    \r\n    const currentUser = this.authService.getLoggedUserDetail();\r\n    this.clientId = currentUser.userData.client.id;\r\n    this.name = currentUser.userData.client.name;\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  MatInputModule,\r\n  MatIconModule,\r\n  MatCardModule,\r\n  MatMenuModule,\r\n  MatButtonModule,\r\n  MatChipsModule,\r\n  MatListModule,\r\n  MatTooltipModule,\r\n  MatDialogModule,\r\n  MatSnackBarModule,\r\n  MatSlideToggleModule,\r\n  MatToolbarModule,\r\n  MatSelectModule,\r\n  MatAutocompleteModule,\r\n  MatStepperModule,\r\n  MatTabsModule,\r\n  MatCheckboxModule\r\n} from '@angular/material';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\nimport { SharedModule } from '../../shared/shared.module';\r\n// import { UserTableComponent } from './users/user-table.component';\r\nimport { UserComponent } from './user.component';\r\nimport { UserTableComponent } from './user-table/user-table.component';\r\nimport { UserCreatePopupComponent } from './user-table/user-create-popup/user-create-popup.component';\r\nimport { UserCategoryPopupComponent } from './user-table/user-category-popup/user-category-popup.component';\r\nimport { UserCommunityPopupComponent } from './user-table/user-community-popup/user-community-popup.component';\r\nimport { RoleTableComponent } from './roles/role-table.component';\r\nimport { RoleTablePopupComponent } from './roles/role-table-popup/role-table-popup.component';\r\nimport { ClientService } from \"../client/client.service\";\r\n\r\nimport { UserRoutes } from './user.routing';\r\nimport { UserService } from './user.service';\r\nimport { UserTablePopupComponent } from './user-table/user-table-popup/user-table-popup.component'\r\nimport { NgxIntlTelInputModule } from 'ngx-intl-tel-input';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule,\r\n    NgxDatatableModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatButtonModule,\r\n    MatChipsModule,\r\n    MatListModule,\r\n    MatTooltipModule,\r\n    MatDialogModule,\r\n    MatSnackBarModule,\r\n    MatSlideToggleModule,\r\n    SharedModule,\r\n    MatToolbarModule,\r\n    MatSelectModule,\r\n    RouterModule.forChild(UserRoutes),\r\n    MatSlideToggleModule,\r\n    MatMenuModule,\r\n    MatAutocompleteModule,\r\n    NgxIntlTelInputModule,\r\n    MatStepperModule,\r\n    MatToolbarModule,\r\n    MatTabsModule,\r\n    MatCheckboxModule,\r\n  ],\r\n  declarations: [\r\n    UserComponent,\r\n    UserTableComponent, \r\n    UserTablePopupComponent, \r\n    UserCreatePopupComponent, \r\n    UserCommunityPopupComponent, \r\n    UserCategoryPopupComponent, \r\n    RoleTableComponent, \r\n    RoleTablePopupComponent\r\n  ],\r\n  providers: [UserService, ClientService],\r\n  entryComponents: [\r\n    UserTablePopupComponent,\r\n    UserCreatePopupComponent,\r\n    UserCommunityPopupComponent, \r\n    UserCategoryPopupComponent,\r\n    RoleTablePopupComponent\r\n  ]\r\n})\r\nexport class UserModule { }\r\n","import { Routes } from '@angular/router';\r\nimport { UserTableComponent } from './user-table/user-table.component';\r\nimport { RoleTableComponent } from './roles/role-table.component';\r\nimport { UserComponent } from './user.component';\r\n\r\nexport const UserRoutes: Routes = [\r\n  {\r\n    path: \"\",\r\n    component: UserComponent,\r\n    data: { title: \"User\", breadcrumb: \"User\" },\r\n    children: [\r\n      {\r\n        path: \"user-table\",\r\n        component: UserTableComponent,\r\n        data: { title: \"Users\", breadcrumb: \"Users\" }\r\n      },\r\n      {\r\n        path: \"role-table\",\r\n        component: RoleTableComponent,\r\n        data: { title: \"Roles\", breadcrumb: \"Roles\" }\r\n      }\r\n    ]\r\n  }\r\n];"],"sourceRoot":""}